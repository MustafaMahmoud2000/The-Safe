
password project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000090  00800060  00000e36  00000eca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000f0  008000f0  00000f5a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000016b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012b9  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000619  00000000  00000000  00002aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000992  00000000  00000000  000030c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  00003a54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ea  00000000  00000000  00003d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c28  00000000  00000000  0000416a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00004d92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e3       	ldi	r30, 0x36	; 54
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3f       	cpi	r26, 0xF0	; 240
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 ef       	ldi	r26, 0xF0	; 240
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 3f       	cpi	r26, 0xF5	; 245
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <main>
  8a:	0c 94 19 07 	jmp	0xe32	; 0xe32 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <vButton_init>:
#include "DIO.h" 
 
 void vButton_init(unsigned char port,unsigned char pin)
{
	vDIO_SET_BIT_DIR(port,pin,0);
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	
}
  98:	08 95       	ret

0000009a <u8Button_read>:
unsigned char u8Button_read(unsigned char port,unsigned char pin)
{
	
	return u8DIO_READ_BIT(port,pin);
  9a:	0e 94 bf 01 	call	0x37e	; 0x37e <u8DIO_READ_BIT>
}
  9e:	08 95       	ret

000000a0 <vDIO_SET_BIT_DIR>:
#include "std_macros.h"
#include "DIO.h"

void vDIO_SET_BIT_DIR(unsigned char port,unsigned char pin,unsigned char dir)
{
	switch(port)
  a0:	84 34       	cpi	r24, 0x44	; 68
  a2:	09 f4       	brne	.+2      	; 0xa6 <vDIO_SET_BIT_DIR+0x6>
  a4:	71 c0       	rjmp	.+226    	; 0x188 <vDIO_SET_BIT_DIR+0xe8>
  a6:	85 34       	cpi	r24, 0x45	; 69
  a8:	48 f4       	brcc	.+18     	; 0xbc <vDIO_SET_BIT_DIR+0x1c>
  aa:	82 34       	cpi	r24, 0x42	; 66
  ac:	99 f1       	breq	.+102    	; 0x114 <vDIO_SET_BIT_DIR+0x74>
  ae:	83 34       	cpi	r24, 0x43	; 67
  b0:	08 f0       	brcs	.+2      	; 0xb4 <vDIO_SET_BIT_DIR+0x14>
  b2:	4d c0       	rjmp	.+154    	; 0x14e <vDIO_SET_BIT_DIR+0xae>
  b4:	81 34       	cpi	r24, 0x41	; 65
  b6:	09 f0       	breq	.+2      	; 0xba <vDIO_SET_BIT_DIR+0x1a>
  b8:	83 c0       	rjmp	.+262    	; 0x1c0 <vDIO_SET_BIT_DIR+0x120>
  ba:	0f c0       	rjmp	.+30     	; 0xda <vDIO_SET_BIT_DIR+0x3a>
  bc:	82 36       	cpi	r24, 0x62	; 98
  be:	51 f1       	breq	.+84     	; 0x114 <vDIO_SET_BIT_DIR+0x74>
  c0:	83 36       	cpi	r24, 0x63	; 99
  c2:	20 f4       	brcc	.+8      	; 0xcc <vDIO_SET_BIT_DIR+0x2c>
  c4:	81 36       	cpi	r24, 0x61	; 97
  c6:	09 f0       	breq	.+2      	; 0xca <vDIO_SET_BIT_DIR+0x2a>
  c8:	7b c0       	rjmp	.+246    	; 0x1c0 <vDIO_SET_BIT_DIR+0x120>
  ca:	07 c0       	rjmp	.+14     	; 0xda <vDIO_SET_BIT_DIR+0x3a>
  cc:	83 36       	cpi	r24, 0x63	; 99
  ce:	09 f4       	brne	.+2      	; 0xd2 <vDIO_SET_BIT_DIR+0x32>
  d0:	3e c0       	rjmp	.+124    	; 0x14e <vDIO_SET_BIT_DIR+0xae>
  d2:	84 36       	cpi	r24, 0x64	; 100
  d4:	09 f0       	breq	.+2      	; 0xd8 <vDIO_SET_BIT_DIR+0x38>
  d6:	74 c0       	rjmp	.+232    	; 0x1c0 <vDIO_SET_BIT_DIR+0x120>
  d8:	57 c0       	rjmp	.+174    	; 0x188 <vDIO_SET_BIT_DIR+0xe8>
	{
		case'A':
		case'a':
		if(dir==1)
  da:	41 30       	cpi	r20, 0x01	; 1
  dc:	69 f4       	brne	.+26     	; 0xf8 <vDIO_SET_BIT_DIR+0x58>
		{
			SET_BIT(DDRA,pin);
  de:	2a b3       	in	r18, 0x1a	; 26
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	ac 01       	movw	r20, r24
  e6:	02 c0       	rjmp	.+4      	; 0xec <vDIO_SET_BIT_DIR+0x4c>
  e8:	44 0f       	add	r20, r20
  ea:	55 1f       	adc	r21, r21
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <vDIO_SET_BIT_DIR+0x48>
  f0:	ba 01       	movw	r22, r20
  f2:	62 2b       	or	r22, r18
  f4:	6a bb       	out	0x1a, r22	; 26
  f6:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRA,pin);
  f8:	2a b3       	in	r18, 0x1a	; 26
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	ac 01       	movw	r20, r24
 100:	02 c0       	rjmp	.+4      	; 0x106 <vDIO_SET_BIT_DIR+0x66>
 102:	44 0f       	add	r20, r20
 104:	55 1f       	adc	r21, r21
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <vDIO_SET_BIT_DIR+0x62>
 10a:	ba 01       	movw	r22, r20
 10c:	60 95       	com	r22
 10e:	62 23       	and	r22, r18
 110:	6a bb       	out	0x1a, r22	; 26
 112:	08 95       	ret
		}
		break;
		case'B':
		case'b':
		if(dir==1)
 114:	41 30       	cpi	r20, 0x01	; 1
 116:	69 f4       	brne	.+26     	; 0x132 <vDIO_SET_BIT_DIR+0x92>
		{
			SET_BIT(DDRB,pin);
 118:	27 b3       	in	r18, 0x17	; 23
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	ac 01       	movw	r20, r24
 120:	02 c0       	rjmp	.+4      	; 0x126 <vDIO_SET_BIT_DIR+0x86>
 122:	44 0f       	add	r20, r20
 124:	55 1f       	adc	r21, r21
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <vDIO_SET_BIT_DIR+0x82>
 12a:	ba 01       	movw	r22, r20
 12c:	62 2b       	or	r22, r18
 12e:	67 bb       	out	0x17, r22	; 23
 130:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRB,pin);
 132:	27 b3       	in	r18, 0x17	; 23
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	ac 01       	movw	r20, r24
 13a:	02 c0       	rjmp	.+4      	; 0x140 <vDIO_SET_BIT_DIR+0xa0>
 13c:	44 0f       	add	r20, r20
 13e:	55 1f       	adc	r21, r21
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <vDIO_SET_BIT_DIR+0x9c>
 144:	ba 01       	movw	r22, r20
 146:	60 95       	com	r22
 148:	62 23       	and	r22, r18
 14a:	67 bb       	out	0x17, r22	; 23
 14c:	08 95       	ret
		}
		break;
		case'C':
		case'c':
		if(dir==1)
 14e:	41 30       	cpi	r20, 0x01	; 1
 150:	69 f4       	brne	.+26     	; 0x16c <vDIO_SET_BIT_DIR+0xcc>
		{
			SET_BIT(DDRC,pin);
 152:	24 b3       	in	r18, 0x14	; 20
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	ac 01       	movw	r20, r24
 15a:	02 c0       	rjmp	.+4      	; 0x160 <vDIO_SET_BIT_DIR+0xc0>
 15c:	44 0f       	add	r20, r20
 15e:	55 1f       	adc	r21, r21
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <vDIO_SET_BIT_DIR+0xbc>
 164:	ba 01       	movw	r22, r20
 166:	62 2b       	or	r22, r18
 168:	64 bb       	out	0x14, r22	; 20
 16a:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRC,pin);
 16c:	24 b3       	in	r18, 0x14	; 20
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	ac 01       	movw	r20, r24
 174:	02 c0       	rjmp	.+4      	; 0x17a <vDIO_SET_BIT_DIR+0xda>
 176:	44 0f       	add	r20, r20
 178:	55 1f       	adc	r21, r21
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <vDIO_SET_BIT_DIR+0xd6>
 17e:	ba 01       	movw	r22, r20
 180:	60 95       	com	r22
 182:	62 23       	and	r22, r18
 184:	64 bb       	out	0x14, r22	; 20
 186:	08 95       	ret
		}
		break;
		case'D':
		case'd':
		if(dir==1)
 188:	41 30       	cpi	r20, 0x01	; 1
 18a:	69 f4       	brne	.+26     	; 0x1a6 <vDIO_SET_BIT_DIR+0x106>
		{
			SET_BIT(DDRD,pin);
 18c:	21 b3       	in	r18, 0x11	; 17
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	ac 01       	movw	r20, r24
 194:	02 c0       	rjmp	.+4      	; 0x19a <vDIO_SET_BIT_DIR+0xfa>
 196:	44 0f       	add	r20, r20
 198:	55 1f       	adc	r21, r21
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <vDIO_SET_BIT_DIR+0xf6>
 19e:	ba 01       	movw	r22, r20
 1a0:	62 2b       	or	r22, r18
 1a2:	61 bb       	out	0x11, r22	; 17
 1a4:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRD,pin);
 1a6:	21 b3       	in	r18, 0x11	; 17
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	ac 01       	movw	r20, r24
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <vDIO_SET_BIT_DIR+0x114>
 1b0:	44 0f       	add	r20, r20
 1b2:	55 1f       	adc	r21, r21
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <vDIO_SET_BIT_DIR+0x110>
 1b8:	ba 01       	movw	r22, r20
 1ba:	60 95       	com	r22
 1bc:	62 23       	and	r22, r18
 1be:	61 bb       	out	0x11, r22	; 17
 1c0:	08 95       	ret

000001c2 <vDIO_WRITE_BIT>:
		
	}
}
void vDIO_WRITE_BIT(unsigned char port,unsigned char pin,unsigned char val)
{
	switch(port)
 1c2:	84 34       	cpi	r24, 0x44	; 68
 1c4:	09 f4       	brne	.+2      	; 0x1c8 <vDIO_WRITE_BIT+0x6>
 1c6:	71 c0       	rjmp	.+226    	; 0x2aa <vDIO_WRITE_BIT+0xe8>
 1c8:	85 34       	cpi	r24, 0x45	; 69
 1ca:	48 f4       	brcc	.+18     	; 0x1de <vDIO_WRITE_BIT+0x1c>
 1cc:	82 34       	cpi	r24, 0x42	; 66
 1ce:	99 f1       	breq	.+102    	; 0x236 <vDIO_WRITE_BIT+0x74>
 1d0:	83 34       	cpi	r24, 0x43	; 67
 1d2:	08 f0       	brcs	.+2      	; 0x1d6 <vDIO_WRITE_BIT+0x14>
 1d4:	4d c0       	rjmp	.+154    	; 0x270 <vDIO_WRITE_BIT+0xae>
 1d6:	81 34       	cpi	r24, 0x41	; 65
 1d8:	09 f0       	breq	.+2      	; 0x1dc <vDIO_WRITE_BIT+0x1a>
 1da:	83 c0       	rjmp	.+262    	; 0x2e2 <vDIO_WRITE_BIT+0x120>
 1dc:	0f c0       	rjmp	.+30     	; 0x1fc <vDIO_WRITE_BIT+0x3a>
 1de:	82 36       	cpi	r24, 0x62	; 98
 1e0:	51 f1       	breq	.+84     	; 0x236 <vDIO_WRITE_BIT+0x74>
 1e2:	83 36       	cpi	r24, 0x63	; 99
 1e4:	20 f4       	brcc	.+8      	; 0x1ee <vDIO_WRITE_BIT+0x2c>
 1e6:	81 36       	cpi	r24, 0x61	; 97
 1e8:	09 f0       	breq	.+2      	; 0x1ec <vDIO_WRITE_BIT+0x2a>
 1ea:	7b c0       	rjmp	.+246    	; 0x2e2 <vDIO_WRITE_BIT+0x120>
 1ec:	07 c0       	rjmp	.+14     	; 0x1fc <vDIO_WRITE_BIT+0x3a>
 1ee:	83 36       	cpi	r24, 0x63	; 99
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <vDIO_WRITE_BIT+0x32>
 1f2:	3e c0       	rjmp	.+124    	; 0x270 <vDIO_WRITE_BIT+0xae>
 1f4:	84 36       	cpi	r24, 0x64	; 100
 1f6:	09 f0       	breq	.+2      	; 0x1fa <vDIO_WRITE_BIT+0x38>
 1f8:	74 c0       	rjmp	.+232    	; 0x2e2 <vDIO_WRITE_BIT+0x120>
 1fa:	57 c0       	rjmp	.+174    	; 0x2aa <vDIO_WRITE_BIT+0xe8>
  {
	case'A':
	case'a':
	if(val==1)
 1fc:	41 30       	cpi	r20, 0x01	; 1
 1fe:	69 f4       	brne	.+26     	; 0x21a <vDIO_WRITE_BIT+0x58>
	{
		SET_BIT(PORTA,pin);
 200:	2b b3       	in	r18, 0x1b	; 27
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	ac 01       	movw	r20, r24
 208:	02 c0       	rjmp	.+4      	; 0x20e <vDIO_WRITE_BIT+0x4c>
 20a:	44 0f       	add	r20, r20
 20c:	55 1f       	adc	r21, r21
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <vDIO_WRITE_BIT+0x48>
 212:	ba 01       	movw	r22, r20
 214:	62 2b       	or	r22, r18
 216:	6b bb       	out	0x1b, r22	; 27
 218:	08 95       	ret
	}
	else
	{
		CLEAR_BIT(PORTA,pin);
 21a:	2b b3       	in	r18, 0x1b	; 27
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	ac 01       	movw	r20, r24
 222:	02 c0       	rjmp	.+4      	; 0x228 <vDIO_WRITE_BIT+0x66>
 224:	44 0f       	add	r20, r20
 226:	55 1f       	adc	r21, r21
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <vDIO_WRITE_BIT+0x62>
 22c:	ba 01       	movw	r22, r20
 22e:	60 95       	com	r22
 230:	62 23       	and	r22, r18
 232:	6b bb       	out	0x1b, r22	; 27
 234:	08 95       	ret
	}
	break;
	case'B':
	case'b':
	if(val==1)
 236:	41 30       	cpi	r20, 0x01	; 1
 238:	69 f4       	brne	.+26     	; 0x254 <vDIO_WRITE_BIT+0x92>
	{
		SET_BIT(PORTB,pin);
 23a:	28 b3       	in	r18, 0x18	; 24
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	ac 01       	movw	r20, r24
 242:	02 c0       	rjmp	.+4      	; 0x248 <vDIO_WRITE_BIT+0x86>
 244:	44 0f       	add	r20, r20
 246:	55 1f       	adc	r21, r21
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <vDIO_WRITE_BIT+0x82>
 24c:	ba 01       	movw	r22, r20
 24e:	62 2b       	or	r22, r18
 250:	68 bb       	out	0x18, r22	; 24
 252:	08 95       	ret
	}
	else
	{
		CLEAR_BIT(PORTB,pin);
 254:	28 b3       	in	r18, 0x18	; 24
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	ac 01       	movw	r20, r24
 25c:	02 c0       	rjmp	.+4      	; 0x262 <vDIO_WRITE_BIT+0xa0>
 25e:	44 0f       	add	r20, r20
 260:	55 1f       	adc	r21, r21
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <vDIO_WRITE_BIT+0x9c>
 266:	ba 01       	movw	r22, r20
 268:	60 95       	com	r22
 26a:	62 23       	and	r22, r18
 26c:	68 bb       	out	0x18, r22	; 24
 26e:	08 95       	ret
	}
	break;
	case'C':
	case'c':
	if(val==1)
 270:	41 30       	cpi	r20, 0x01	; 1
 272:	69 f4       	brne	.+26     	; 0x28e <vDIO_WRITE_BIT+0xcc>
	{
		SET_BIT(PORTC,pin);
 274:	25 b3       	in	r18, 0x15	; 21
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	ac 01       	movw	r20, r24
 27c:	02 c0       	rjmp	.+4      	; 0x282 <vDIO_WRITE_BIT+0xc0>
 27e:	44 0f       	add	r20, r20
 280:	55 1f       	adc	r21, r21
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <vDIO_WRITE_BIT+0xbc>
 286:	ba 01       	movw	r22, r20
 288:	62 2b       	or	r22, r18
 28a:	65 bb       	out	0x15, r22	; 21
 28c:	08 95       	ret
	}
	else
	{
		CLEAR_BIT(PORTC,pin);
 28e:	25 b3       	in	r18, 0x15	; 21
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	ac 01       	movw	r20, r24
 296:	02 c0       	rjmp	.+4      	; 0x29c <vDIO_WRITE_BIT+0xda>
 298:	44 0f       	add	r20, r20
 29a:	55 1f       	adc	r21, r21
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <vDIO_WRITE_BIT+0xd6>
 2a0:	ba 01       	movw	r22, r20
 2a2:	60 95       	com	r22
 2a4:	62 23       	and	r22, r18
 2a6:	65 bb       	out	0x15, r22	; 21
 2a8:	08 95       	ret
	}
	break;
	case'D':
	case'd':
	if(val==1)
 2aa:	41 30       	cpi	r20, 0x01	; 1
 2ac:	69 f4       	brne	.+26     	; 0x2c8 <vDIO_WRITE_BIT+0x106>
	{
		SET_BIT(PORTD,pin);
 2ae:	22 b3       	in	r18, 0x12	; 18
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	ac 01       	movw	r20, r24
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <vDIO_WRITE_BIT+0xfa>
 2b8:	44 0f       	add	r20, r20
 2ba:	55 1f       	adc	r21, r21
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <vDIO_WRITE_BIT+0xf6>
 2c0:	ba 01       	movw	r22, r20
 2c2:	62 2b       	or	r22, r18
 2c4:	62 bb       	out	0x12, r22	; 18
 2c6:	08 95       	ret
	}
	else
	{
		CLEAR_BIT(PORTD,pin);
 2c8:	22 b3       	in	r18, 0x12	; 18
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	ac 01       	movw	r20, r24
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <vDIO_WRITE_BIT+0x114>
 2d2:	44 0f       	add	r20, r20
 2d4:	55 1f       	adc	r21, r21
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <vDIO_WRITE_BIT+0x110>
 2da:	ba 01       	movw	r22, r20
 2dc:	60 95       	com	r22
 2de:	62 23       	and	r22, r18
 2e0:	62 bb       	out	0x12, r22	; 18
 2e2:	08 95       	ret

000002e4 <vDIO_TOGGLE_BIT>:
	
  }
}
void vDIO_TOGGLE_BIT(unsigned char port,unsigned char pin)
{
switch(port)
 2e4:	84 34       	cpi	r24, 0x44	; 68
 2e6:	09 f4       	brne	.+2      	; 0x2ea <vDIO_TOGGLE_BIT+0x6>
 2e8:	3d c0       	rjmp	.+122    	; 0x364 <vDIO_TOGGLE_BIT+0x80>
 2ea:	85 34       	cpi	r24, 0x45	; 69
 2ec:	40 f4       	brcc	.+16     	; 0x2fe <vDIO_TOGGLE_BIT+0x1a>
 2ee:	82 34       	cpi	r24, 0x42	; 66
 2f0:	f9 f0       	breq	.+62     	; 0x330 <vDIO_TOGGLE_BIT+0x4c>
 2f2:	83 34       	cpi	r24, 0x43	; 67
 2f4:	50 f5       	brcc	.+84     	; 0x34a <vDIO_TOGGLE_BIT+0x66>
 2f6:	81 34       	cpi	r24, 0x41	; 65
 2f8:	09 f0       	breq	.+2      	; 0x2fc <vDIO_TOGGLE_BIT+0x18>
 2fa:	40 c0       	rjmp	.+128    	; 0x37c <vDIO_TOGGLE_BIT+0x98>
 2fc:	0c c0       	rjmp	.+24     	; 0x316 <vDIO_TOGGLE_BIT+0x32>
 2fe:	82 36       	cpi	r24, 0x62	; 98
 300:	b9 f0       	breq	.+46     	; 0x330 <vDIO_TOGGLE_BIT+0x4c>
 302:	83 36       	cpi	r24, 0x63	; 99
 304:	18 f4       	brcc	.+6      	; 0x30c <vDIO_TOGGLE_BIT+0x28>
 306:	81 36       	cpi	r24, 0x61	; 97
 308:	c9 f5       	brne	.+114    	; 0x37c <vDIO_TOGGLE_BIT+0x98>
 30a:	05 c0       	rjmp	.+10     	; 0x316 <vDIO_TOGGLE_BIT+0x32>
 30c:	83 36       	cpi	r24, 0x63	; 99
 30e:	e9 f0       	breq	.+58     	; 0x34a <vDIO_TOGGLE_BIT+0x66>
 310:	84 36       	cpi	r24, 0x64	; 100
 312:	a1 f5       	brne	.+104    	; 0x37c <vDIO_TOGGLE_BIT+0x98>
 314:	27 c0       	rjmp	.+78     	; 0x364 <vDIO_TOGGLE_BIT+0x80>
{
	case'A':
	case'a':
	TOGGAL_BIT(PORTA,pin);
 316:	2b b3       	in	r18, 0x1b	; 27
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	ac 01       	movw	r20, r24
 31e:	02 c0       	rjmp	.+4      	; 0x324 <vDIO_TOGGLE_BIT+0x40>
 320:	44 0f       	add	r20, r20
 322:	55 1f       	adc	r21, r21
 324:	6a 95       	dec	r22
 326:	e2 f7       	brpl	.-8      	; 0x320 <vDIO_TOGGLE_BIT+0x3c>
 328:	ba 01       	movw	r22, r20
 32a:	62 27       	eor	r22, r18
 32c:	6b bb       	out	0x1b, r22	; 27
	break;
 32e:	08 95       	ret
	case'B':
	case'b':
	TOGGAL_BIT(PORTB,pin);
 330:	28 b3       	in	r18, 0x18	; 24
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	ac 01       	movw	r20, r24
 338:	02 c0       	rjmp	.+4      	; 0x33e <vDIO_TOGGLE_BIT+0x5a>
 33a:	44 0f       	add	r20, r20
 33c:	55 1f       	adc	r21, r21
 33e:	6a 95       	dec	r22
 340:	e2 f7       	brpl	.-8      	; 0x33a <vDIO_TOGGLE_BIT+0x56>
 342:	ba 01       	movw	r22, r20
 344:	62 27       	eor	r22, r18
 346:	68 bb       	out	0x18, r22	; 24
	break;
 348:	08 95       	ret
	case'C':
	case'c':
	TOGGAL_BIT(PORTC,pin);
 34a:	25 b3       	in	r18, 0x15	; 21
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	ac 01       	movw	r20, r24
 352:	02 c0       	rjmp	.+4      	; 0x358 <vDIO_TOGGLE_BIT+0x74>
 354:	44 0f       	add	r20, r20
 356:	55 1f       	adc	r21, r21
 358:	6a 95       	dec	r22
 35a:	e2 f7       	brpl	.-8      	; 0x354 <vDIO_TOGGLE_BIT+0x70>
 35c:	ba 01       	movw	r22, r20
 35e:	62 27       	eor	r22, r18
 360:	65 bb       	out	0x15, r22	; 21
	break;
 362:	08 95       	ret
	case'D':
	case'd':
	TOGGAL_BIT(PORTD,pin);
 364:	22 b3       	in	r18, 0x12	; 18
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	ac 01       	movw	r20, r24
 36c:	02 c0       	rjmp	.+4      	; 0x372 <vDIO_TOGGLE_BIT+0x8e>
 36e:	44 0f       	add	r20, r20
 370:	55 1f       	adc	r21, r21
 372:	6a 95       	dec	r22
 374:	e2 f7       	brpl	.-8      	; 0x36e <vDIO_TOGGLE_BIT+0x8a>
 376:	ba 01       	movw	r22, r20
 378:	62 27       	eor	r22, r18
 37a:	62 bb       	out	0x12, r22	; 18
 37c:	08 95       	ret

0000037e <u8DIO_READ_BIT>:
}		
}
unsigned char u8DIO_READ_BIT(unsigned char port, unsigned char pin)
{

	switch(port)
 37e:	84 34       	cpi	r24, 0x44	; 68
 380:	09 f4       	brne	.+2      	; 0x384 <u8DIO_READ_BIT+0x6>
 382:	4e c0       	rjmp	.+156    	; 0x420 <u8DIO_READ_BIT+0xa2>
 384:	85 34       	cpi	r24, 0x45	; 69
 386:	40 f4       	brcc	.+16     	; 0x398 <u8DIO_READ_BIT+0x1a>
 388:	82 34       	cpi	r24, 0x42	; 66
 38a:	31 f1       	breq	.+76     	; 0x3d8 <u8DIO_READ_BIT+0x5a>
 38c:	83 34       	cpi	r24, 0x43	; 67
 38e:	b0 f5       	brcc	.+108    	; 0x3fc <u8DIO_READ_BIT+0x7e>
 390:	81 34       	cpi	r24, 0x41	; 65
 392:	09 f0       	breq	.+2      	; 0x396 <u8DIO_READ_BIT+0x18>
 394:	57 c0       	rjmp	.+174    	; 0x444 <u8DIO_READ_BIT+0xc6>
 396:	0e c0       	rjmp	.+28     	; 0x3b4 <u8DIO_READ_BIT+0x36>
 398:	82 36       	cpi	r24, 0x62	; 98
 39a:	f1 f0       	breq	.+60     	; 0x3d8 <u8DIO_READ_BIT+0x5a>
 39c:	83 36       	cpi	r24, 0x63	; 99
 39e:	20 f4       	brcc	.+8      	; 0x3a8 <u8DIO_READ_BIT+0x2a>
 3a0:	81 36       	cpi	r24, 0x61	; 97
 3a2:	09 f0       	breq	.+2      	; 0x3a6 <u8DIO_READ_BIT+0x28>
 3a4:	4f c0       	rjmp	.+158    	; 0x444 <u8DIO_READ_BIT+0xc6>
 3a6:	06 c0       	rjmp	.+12     	; 0x3b4 <u8DIO_READ_BIT+0x36>
 3a8:	83 36       	cpi	r24, 0x63	; 99
 3aa:	41 f1       	breq	.+80     	; 0x3fc <u8DIO_READ_BIT+0x7e>
 3ac:	84 36       	cpi	r24, 0x64	; 100
 3ae:	09 f0       	breq	.+2      	; 0x3b2 <u8DIO_READ_BIT+0x34>
 3b0:	49 c0       	rjmp	.+146    	; 0x444 <u8DIO_READ_BIT+0xc6>
 3b2:	36 c0       	rjmp	.+108    	; 0x420 <u8DIO_READ_BIT+0xa2>
	{
		case'A':
		case'a':
		return READ_BIT(PINA,pin);
 3b4:	29 b3       	in	r18, 0x19	; 25
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	06 2e       	mov	r0, r22
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <u8DIO_READ_BIT+0x44>
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	0a 94       	dec	r0
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <u8DIO_READ_BIT+0x40>
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	82 23       	and	r24, r18
 3ca:	93 23       	and	r25, r19
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <u8DIO_READ_BIT+0x54>
 3ce:	95 95       	asr	r25
 3d0:	87 95       	ror	r24
 3d2:	6a 95       	dec	r22
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <u8DIO_READ_BIT+0x50>
 3d6:	08 95       	ret
		break;
		case'B':
		case'b':
		return READ_BIT(PINB,pin);
 3d8:	26 b3       	in	r18, 0x16	; 22
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	06 2e       	mov	r0, r22
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <u8DIO_READ_BIT+0x68>
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	0a 94       	dec	r0
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <u8DIO_READ_BIT+0x64>
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	82 23       	and	r24, r18
 3ee:	93 23       	and	r25, r19
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <u8DIO_READ_BIT+0x78>
 3f2:	95 95       	asr	r25
 3f4:	87 95       	ror	r24
 3f6:	6a 95       	dec	r22
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <u8DIO_READ_BIT+0x74>
 3fa:	08 95       	ret
		break;
		case'C':
		case'c':
		return READ_BIT(PINC,pin);
 3fc:	23 b3       	in	r18, 0x13	; 19
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	06 2e       	mov	r0, r22
 404:	02 c0       	rjmp	.+4      	; 0x40a <u8DIO_READ_BIT+0x8c>
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	0a 94       	dec	r0
 40c:	e2 f7       	brpl	.-8      	; 0x406 <u8DIO_READ_BIT+0x88>
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	82 23       	and	r24, r18
 412:	93 23       	and	r25, r19
 414:	02 c0       	rjmp	.+4      	; 0x41a <u8DIO_READ_BIT+0x9c>
 416:	95 95       	asr	r25
 418:	87 95       	ror	r24
 41a:	6a 95       	dec	r22
 41c:	e2 f7       	brpl	.-8      	; 0x416 <u8DIO_READ_BIT+0x98>
 41e:	08 95       	ret
		break;
		case'D':
		case'd':
		return READ_BIT(PIND,pin);
 420:	20 b3       	in	r18, 0x10	; 16
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	06 2e       	mov	r0, r22
 428:	02 c0       	rjmp	.+4      	; 0x42e <u8DIO_READ_BIT+0xb0>
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	0a 94       	dec	r0
 430:	e2 f7       	brpl	.-8      	; 0x42a <u8DIO_READ_BIT+0xac>
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	82 23       	and	r24, r18
 436:	93 23       	and	r25, r19
 438:	02 c0       	rjmp	.+4      	; 0x43e <u8DIO_READ_BIT+0xc0>
 43a:	95 95       	asr	r25
 43c:	87 95       	ror	r24
 43e:	6a 95       	dec	r22
 440:	e2 f7       	brpl	.-8      	; 0x43a <u8DIO_READ_BIT+0xbc>
 442:	08 95       	ret
		break;
		default:
		break;
   }
}
 444:	08 95       	ret

00000446 <vDIO_SET_PORT>:
void vDIO_SET_PORT( unsigned char port,unsigned char dir)
{
	switch(port)
 446:	84 34       	cpi	r24, 0x44	; 68
 448:	d9 f0       	breq	.+54     	; 0x480 <vDIO_SET_PORT+0x3a>
 44a:	85 34       	cpi	r24, 0x45	; 69
 44c:	38 f4       	brcc	.+14     	; 0x45c <vDIO_SET_PORT+0x16>
 44e:	82 34       	cpi	r24, 0x42	; 66
 450:	99 f0       	breq	.+38     	; 0x478 <vDIO_SET_PORT+0x32>
 452:	83 34       	cpi	r24, 0x43	; 67
 454:	98 f4       	brcc	.+38     	; 0x47c <vDIO_SET_PORT+0x36>
 456:	81 34       	cpi	r24, 0x41	; 65
 458:	a1 f4       	brne	.+40     	; 0x482 <vDIO_SET_PORT+0x3c>
 45a:	0c c0       	rjmp	.+24     	; 0x474 <vDIO_SET_PORT+0x2e>
 45c:	82 36       	cpi	r24, 0x62	; 98
 45e:	61 f0       	breq	.+24     	; 0x478 <vDIO_SET_PORT+0x32>
 460:	83 36       	cpi	r24, 0x63	; 99
 462:	18 f4       	brcc	.+6      	; 0x46a <vDIO_SET_PORT+0x24>
 464:	81 36       	cpi	r24, 0x61	; 97
 466:	69 f4       	brne	.+26     	; 0x482 <vDIO_SET_PORT+0x3c>
 468:	05 c0       	rjmp	.+10     	; 0x474 <vDIO_SET_PORT+0x2e>
 46a:	83 36       	cpi	r24, 0x63	; 99
 46c:	39 f0       	breq	.+14     	; 0x47c <vDIO_SET_PORT+0x36>
 46e:	84 36       	cpi	r24, 0x64	; 100
 470:	41 f4       	brne	.+16     	; 0x482 <vDIO_SET_PORT+0x3c>
 472:	06 c0       	rjmp	.+12     	; 0x480 <vDIO_SET_PORT+0x3a>
	{
		case 'A':
		case 'a':
		DDRA=dir;
 474:	6a bb       	out	0x1a, r22	; 26
		break;
 476:	08 95       	ret
		case 'B':
		case 'b':
		DDRB=dir;
 478:	67 bb       	out	0x17, r22	; 23
		break;
 47a:	08 95       	ret
		case 'C':
		case 'c':
		DDRC=dir;
 47c:	64 bb       	out	0x14, r22	; 20
		break;
 47e:	08 95       	ret
		case 'D':
		case 'd':
		DDRD=dir;
 480:	61 bb       	out	0x11, r22	; 17
 482:	08 95       	ret

00000484 <vDIO_WRITE_PORT>:
		break;
	}
}
void vDIO_WRITE_PORT(unsigned char port,unsigned char val)
{
	switch(port)
 484:	84 34       	cpi	r24, 0x44	; 68
 486:	d9 f0       	breq	.+54     	; 0x4be <vDIO_WRITE_PORT+0x3a>
 488:	85 34       	cpi	r24, 0x45	; 69
 48a:	38 f4       	brcc	.+14     	; 0x49a <vDIO_WRITE_PORT+0x16>
 48c:	82 34       	cpi	r24, 0x42	; 66
 48e:	99 f0       	breq	.+38     	; 0x4b6 <vDIO_WRITE_PORT+0x32>
 490:	83 34       	cpi	r24, 0x43	; 67
 492:	98 f4       	brcc	.+38     	; 0x4ba <vDIO_WRITE_PORT+0x36>
 494:	81 34       	cpi	r24, 0x41	; 65
 496:	a1 f4       	brne	.+40     	; 0x4c0 <vDIO_WRITE_PORT+0x3c>
 498:	0c c0       	rjmp	.+24     	; 0x4b2 <vDIO_WRITE_PORT+0x2e>
 49a:	82 36       	cpi	r24, 0x62	; 98
 49c:	61 f0       	breq	.+24     	; 0x4b6 <vDIO_WRITE_PORT+0x32>
 49e:	83 36       	cpi	r24, 0x63	; 99
 4a0:	18 f4       	brcc	.+6      	; 0x4a8 <vDIO_WRITE_PORT+0x24>
 4a2:	81 36       	cpi	r24, 0x61	; 97
 4a4:	69 f4       	brne	.+26     	; 0x4c0 <vDIO_WRITE_PORT+0x3c>
 4a6:	05 c0       	rjmp	.+10     	; 0x4b2 <vDIO_WRITE_PORT+0x2e>
 4a8:	83 36       	cpi	r24, 0x63	; 99
 4aa:	39 f0       	breq	.+14     	; 0x4ba <vDIO_WRITE_PORT+0x36>
 4ac:	84 36       	cpi	r24, 0x64	; 100
 4ae:	41 f4       	brne	.+16     	; 0x4c0 <vDIO_WRITE_PORT+0x3c>
 4b0:	06 c0       	rjmp	.+12     	; 0x4be <vDIO_WRITE_PORT+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=val;
 4b2:	6b bb       	out	0x1b, r22	; 27
		break;
 4b4:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=val;
 4b6:	68 bb       	out	0x18, r22	; 24
		break;
 4b8:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=val;
 4ba:	65 bb       	out	0x15, r22	; 21
		break;
 4bc:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=val;
 4be:	62 bb       	out	0x12, r22	; 18
 4c0:	08 95       	ret

000004c2 <u8DIO_READ_PORT>:
	}
}
unsigned char u8DIO_READ_PORT(unsigned char port)
{
	unsigned char ret_val;
	switch(port)
 4c2:	84 34       	cpi	r24, 0x44	; 68
 4c4:	d9 f0       	breq	.+54     	; 0x4fc <u8DIO_READ_PORT+0x3a>
 4c6:	85 34       	cpi	r24, 0x45	; 69
 4c8:	38 f4       	brcc	.+14     	; 0x4d8 <u8DIO_READ_PORT+0x16>
 4ca:	82 34       	cpi	r24, 0x42	; 66
 4cc:	99 f0       	breq	.+38     	; 0x4f4 <u8DIO_READ_PORT+0x32>
 4ce:	83 34       	cpi	r24, 0x43	; 67
 4d0:	98 f4       	brcc	.+38     	; 0x4f8 <u8DIO_READ_PORT+0x36>
 4d2:	81 34       	cpi	r24, 0x41	; 65
 4d4:	a1 f4       	brne	.+40     	; 0x4fe <u8DIO_READ_PORT+0x3c>
 4d6:	0c c0       	rjmp	.+24     	; 0x4f0 <u8DIO_READ_PORT+0x2e>
 4d8:	82 36       	cpi	r24, 0x62	; 98
 4da:	61 f0       	breq	.+24     	; 0x4f4 <u8DIO_READ_PORT+0x32>
 4dc:	83 36       	cpi	r24, 0x63	; 99
 4de:	18 f4       	brcc	.+6      	; 0x4e6 <u8DIO_READ_PORT+0x24>
 4e0:	81 36       	cpi	r24, 0x61	; 97
 4e2:	69 f4       	brne	.+26     	; 0x4fe <u8DIO_READ_PORT+0x3c>
 4e4:	05 c0       	rjmp	.+10     	; 0x4f0 <u8DIO_READ_PORT+0x2e>
 4e6:	83 36       	cpi	r24, 0x63	; 99
 4e8:	39 f0       	breq	.+14     	; 0x4f8 <u8DIO_READ_PORT+0x36>
 4ea:	84 36       	cpi	r24, 0x64	; 100
 4ec:	41 f4       	brne	.+16     	; 0x4fe <u8DIO_READ_PORT+0x3c>
 4ee:	06 c0       	rjmp	.+12     	; 0x4fc <u8DIO_READ_PORT+0x3a>
	{
		case 'A':
		case 'a':
		ret_val=PINA;
 4f0:	89 b3       	in	r24, 0x19	; 25
		break;
 4f2:	08 95       	ret
		case 'B':
		case 'b':
		ret_val=PINB;
 4f4:	86 b3       	in	r24, 0x16	; 22
		break;
 4f6:	08 95       	ret
		case 'C':
		case 'c':
		ret_val=PINC;
 4f8:	83 b3       	in	r24, 0x13	; 19
		break;
 4fa:	08 95       	ret
		case 'D':
		case 'd':
		ret_val=PIND;
 4fc:	80 b3       	in	r24, 0x10	; 16
		break;
		default:
		break;	
		
	}
}
 4fe:	08 95       	ret

00000500 <vDIO_TOGGLE_PORT>:
void vDIO_TOGGLE_PORT(unsigned char port)
{
	switch(port)
 500:	84 34       	cpi	r24, 0x44	; 68
 502:	09 f1       	breq	.+66     	; 0x546 <vDIO_TOGGLE_PORT+0x46>
 504:	85 34       	cpi	r24, 0x45	; 69
 506:	38 f4       	brcc	.+14     	; 0x516 <vDIO_TOGGLE_PORT+0x16>
 508:	82 34       	cpi	r24, 0x42	; 66
 50a:	a9 f0       	breq	.+42     	; 0x536 <vDIO_TOGGLE_PORT+0x36>
 50c:	83 34       	cpi	r24, 0x43	; 67
 50e:	b8 f4       	brcc	.+46     	; 0x53e <vDIO_TOGGLE_PORT+0x3e>
 510:	81 34       	cpi	r24, 0x41	; 65
 512:	e1 f4       	brne	.+56     	; 0x54c <vDIO_TOGGLE_PORT+0x4c>
 514:	0c c0       	rjmp	.+24     	; 0x52e <vDIO_TOGGLE_PORT+0x2e>
 516:	82 36       	cpi	r24, 0x62	; 98
 518:	71 f0       	breq	.+28     	; 0x536 <vDIO_TOGGLE_PORT+0x36>
 51a:	83 36       	cpi	r24, 0x63	; 99
 51c:	18 f4       	brcc	.+6      	; 0x524 <vDIO_TOGGLE_PORT+0x24>
 51e:	81 36       	cpi	r24, 0x61	; 97
 520:	a9 f4       	brne	.+42     	; 0x54c <vDIO_TOGGLE_PORT+0x4c>
 522:	05 c0       	rjmp	.+10     	; 0x52e <vDIO_TOGGLE_PORT+0x2e>
 524:	83 36       	cpi	r24, 0x63	; 99
 526:	59 f0       	breq	.+22     	; 0x53e <vDIO_TOGGLE_PORT+0x3e>
 528:	84 36       	cpi	r24, 0x64	; 100
 52a:	81 f4       	brne	.+32     	; 0x54c <vDIO_TOGGLE_PORT+0x4c>
 52c:	0c c0       	rjmp	.+24     	; 0x546 <vDIO_TOGGLE_PORT+0x46>
	{
		case 'A':
		case 'a':
		PORTA=~PORTA;
 52e:	8b b3       	in	r24, 0x1b	; 27
 530:	80 95       	com	r24
 532:	8b bb       	out	0x1b, r24	; 27
		break;
 534:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=~PORTB;
 536:	88 b3       	in	r24, 0x18	; 24
 538:	80 95       	com	r24
 53a:	88 bb       	out	0x18, r24	; 24
		break;
 53c:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=~PORTC;
 53e:	85 b3       	in	r24, 0x15	; 21
 540:	80 95       	com	r24
 542:	85 bb       	out	0x15, r24	; 21
		break;
 544:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=~PORTD;
 546:	82 b3       	in	r24, 0x12	; 18
 548:	80 95       	com	r24
 54a:	82 bb       	out	0x12, r24	; 18
 54c:	08 95       	ret

0000054e <vDIO_PULLUP_CONNECT>:
		break;
	}
}
void vDIO_PULLUP_CONNECT(unsigned char port,unsigned char pin,unsigned char connect)
{
	switch(port)
 54e:	84 34       	cpi	r24, 0x44	; 68
 550:	09 f4       	brne	.+2      	; 0x554 <vDIO_PULLUP_CONNECT+0x6>
 552:	71 c0       	rjmp	.+226    	; 0x636 <vDIO_PULLUP_CONNECT+0xe8>
 554:	85 34       	cpi	r24, 0x45	; 69
 556:	48 f4       	brcc	.+18     	; 0x56a <vDIO_PULLUP_CONNECT+0x1c>
 558:	82 34       	cpi	r24, 0x42	; 66
 55a:	99 f1       	breq	.+102    	; 0x5c2 <vDIO_PULLUP_CONNECT+0x74>
 55c:	83 34       	cpi	r24, 0x43	; 67
 55e:	08 f0       	brcs	.+2      	; 0x562 <vDIO_PULLUP_CONNECT+0x14>
 560:	4d c0       	rjmp	.+154    	; 0x5fc <vDIO_PULLUP_CONNECT+0xae>
 562:	81 34       	cpi	r24, 0x41	; 65
 564:	09 f0       	breq	.+2      	; 0x568 <vDIO_PULLUP_CONNECT+0x1a>
 566:	83 c0       	rjmp	.+262    	; 0x66e <vDIO_PULLUP_CONNECT+0x120>
 568:	0f c0       	rjmp	.+30     	; 0x588 <vDIO_PULLUP_CONNECT+0x3a>
 56a:	82 36       	cpi	r24, 0x62	; 98
 56c:	51 f1       	breq	.+84     	; 0x5c2 <vDIO_PULLUP_CONNECT+0x74>
 56e:	83 36       	cpi	r24, 0x63	; 99
 570:	20 f4       	brcc	.+8      	; 0x57a <vDIO_PULLUP_CONNECT+0x2c>
 572:	81 36       	cpi	r24, 0x61	; 97
 574:	09 f0       	breq	.+2      	; 0x578 <vDIO_PULLUP_CONNECT+0x2a>
 576:	7b c0       	rjmp	.+246    	; 0x66e <vDIO_PULLUP_CONNECT+0x120>
 578:	07 c0       	rjmp	.+14     	; 0x588 <vDIO_PULLUP_CONNECT+0x3a>
 57a:	83 36       	cpi	r24, 0x63	; 99
 57c:	09 f4       	brne	.+2      	; 0x580 <vDIO_PULLUP_CONNECT+0x32>
 57e:	3e c0       	rjmp	.+124    	; 0x5fc <vDIO_PULLUP_CONNECT+0xae>
 580:	84 36       	cpi	r24, 0x64	; 100
 582:	09 f0       	breq	.+2      	; 0x586 <vDIO_PULLUP_CONNECT+0x38>
 584:	74 c0       	rjmp	.+232    	; 0x66e <vDIO_PULLUP_CONNECT+0x120>
 586:	57 c0       	rjmp	.+174    	; 0x636 <vDIO_PULLUP_CONNECT+0xe8>
	{
		case'A':
		case'a':
		if(connect==1)
 588:	41 30       	cpi	r20, 0x01	; 1
 58a:	69 f4       	brne	.+26     	; 0x5a6 <vDIO_PULLUP_CONNECT+0x58>
		{
			SET_BIT(PORTA,pin);
 58c:	2b b3       	in	r18, 0x1b	; 27
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	ac 01       	movw	r20, r24
 594:	02 c0       	rjmp	.+4      	; 0x59a <vDIO_PULLUP_CONNECT+0x4c>
 596:	44 0f       	add	r20, r20
 598:	55 1f       	adc	r21, r21
 59a:	6a 95       	dec	r22
 59c:	e2 f7       	brpl	.-8      	; 0x596 <vDIO_PULLUP_CONNECT+0x48>
 59e:	ba 01       	movw	r22, r20
 5a0:	62 2b       	or	r22, r18
 5a2:	6b bb       	out	0x1b, r22	; 27
 5a4:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTA,pin);
 5a6:	2b b3       	in	r18, 0x1b	; 27
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	ac 01       	movw	r20, r24
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <vDIO_PULLUP_CONNECT+0x66>
 5b0:	44 0f       	add	r20, r20
 5b2:	55 1f       	adc	r21, r21
 5b4:	6a 95       	dec	r22
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <vDIO_PULLUP_CONNECT+0x62>
 5b8:	ba 01       	movw	r22, r20
 5ba:	60 95       	com	r22
 5bc:	62 23       	and	r22, r18
 5be:	6b bb       	out	0x1b, r22	; 27
 5c0:	08 95       	ret
		}
		break;
		case'B':
		case'b':
		if(connect==1)
 5c2:	41 30       	cpi	r20, 0x01	; 1
 5c4:	69 f4       	brne	.+26     	; 0x5e0 <vDIO_PULLUP_CONNECT+0x92>
		{
			SET_BIT(PORTB,pin);
 5c6:	28 b3       	in	r18, 0x18	; 24
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	ac 01       	movw	r20, r24
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <vDIO_PULLUP_CONNECT+0x86>
 5d0:	44 0f       	add	r20, r20
 5d2:	55 1f       	adc	r21, r21
 5d4:	6a 95       	dec	r22
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <vDIO_PULLUP_CONNECT+0x82>
 5d8:	ba 01       	movw	r22, r20
 5da:	62 2b       	or	r22, r18
 5dc:	68 bb       	out	0x18, r22	; 24
 5de:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTB,pin);
 5e0:	28 b3       	in	r18, 0x18	; 24
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	ac 01       	movw	r20, r24
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <vDIO_PULLUP_CONNECT+0xa0>
 5ea:	44 0f       	add	r20, r20
 5ec:	55 1f       	adc	r21, r21
 5ee:	6a 95       	dec	r22
 5f0:	e2 f7       	brpl	.-8      	; 0x5ea <vDIO_PULLUP_CONNECT+0x9c>
 5f2:	ba 01       	movw	r22, r20
 5f4:	60 95       	com	r22
 5f6:	62 23       	and	r22, r18
 5f8:	68 bb       	out	0x18, r22	; 24
 5fa:	08 95       	ret
		}
		break;
		case'C':
		case'c':
		if(connect==1)
 5fc:	41 30       	cpi	r20, 0x01	; 1
 5fe:	69 f4       	brne	.+26     	; 0x61a <vDIO_PULLUP_CONNECT+0xcc>
		{
			SET_BIT(PORTC,pin);
 600:	25 b3       	in	r18, 0x15	; 21
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	ac 01       	movw	r20, r24
 608:	02 c0       	rjmp	.+4      	; 0x60e <vDIO_PULLUP_CONNECT+0xc0>
 60a:	44 0f       	add	r20, r20
 60c:	55 1f       	adc	r21, r21
 60e:	6a 95       	dec	r22
 610:	e2 f7       	brpl	.-8      	; 0x60a <vDIO_PULLUP_CONNECT+0xbc>
 612:	ba 01       	movw	r22, r20
 614:	62 2b       	or	r22, r18
 616:	65 bb       	out	0x15, r22	; 21
 618:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTC,pin);
 61a:	25 b3       	in	r18, 0x15	; 21
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	ac 01       	movw	r20, r24
 622:	02 c0       	rjmp	.+4      	; 0x628 <vDIO_PULLUP_CONNECT+0xda>
 624:	44 0f       	add	r20, r20
 626:	55 1f       	adc	r21, r21
 628:	6a 95       	dec	r22
 62a:	e2 f7       	brpl	.-8      	; 0x624 <vDIO_PULLUP_CONNECT+0xd6>
 62c:	ba 01       	movw	r22, r20
 62e:	60 95       	com	r22
 630:	62 23       	and	r22, r18
 632:	65 bb       	out	0x15, r22	; 21
 634:	08 95       	ret
		}
		break;
		case'D':
		case'd':
		if(connect==1)
 636:	41 30       	cpi	r20, 0x01	; 1
 638:	69 f4       	brne	.+26     	; 0x654 <vDIO_PULLUP_CONNECT+0x106>
		{
			SET_BIT(PORTD,pin);
 63a:	22 b3       	in	r18, 0x12	; 18
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	ac 01       	movw	r20, r24
 642:	02 c0       	rjmp	.+4      	; 0x648 <vDIO_PULLUP_CONNECT+0xfa>
 644:	44 0f       	add	r20, r20
 646:	55 1f       	adc	r21, r21
 648:	6a 95       	dec	r22
 64a:	e2 f7       	brpl	.-8      	; 0x644 <vDIO_PULLUP_CONNECT+0xf6>
 64c:	ba 01       	movw	r22, r20
 64e:	62 2b       	or	r22, r18
 650:	62 bb       	out	0x12, r22	; 18
 652:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTD,pin);
 654:	22 b3       	in	r18, 0x12	; 18
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	ac 01       	movw	r20, r24
 65c:	02 c0       	rjmp	.+4      	; 0x662 <vDIO_PULLUP_CONNECT+0x114>
 65e:	44 0f       	add	r20, r20
 660:	55 1f       	adc	r21, r21
 662:	6a 95       	dec	r22
 664:	e2 f7       	brpl	.-8      	; 0x65e <vDIO_PULLUP_CONNECT+0x110>
 666:	ba 01       	movw	r22, r20
 668:	60 95       	com	r22
 66a:	62 23       	and	r22, r18
 66c:	62 bb       	out	0x12, r22	; 18
 66e:	08 95       	ret

00000670 <vDIO_WRITE_LOW_NIBBLE>:
		default:
		break;
}
}
void vDIO_WRITE_LOW_NIBBLE(unsigned char port,unsigned char value)
{
 670:	0f 93       	push	r16
 672:	1f 93       	push	r17
 674:	cf 93       	push	r28
 676:	c8 2f       	mov	r28, r24
 678:	06 2f       	mov	r16, r22
	vDIO_WRITE_BIT(port,0,READ_BIT(value,0));
 67a:	46 2f       	mov	r20, r22
 67c:	41 70       	andi	r20, 0x01	; 1
 67e:	60 e0       	ldi	r22, 0x00	; 0
 680:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
	vDIO_WRITE_BIT(port,1,READ_BIT(value,1));
 684:	10 e0       	ldi	r17, 0x00	; 0
 686:	a8 01       	movw	r20, r16
 688:	42 70       	andi	r20, 0x02	; 2
 68a:	50 70       	andi	r21, 0x00	; 0
 68c:	55 95       	asr	r21
 68e:	47 95       	ror	r20
 690:	8c 2f       	mov	r24, r28
 692:	61 e0       	ldi	r22, 0x01	; 1
 694:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
	vDIO_WRITE_BIT(port,2,READ_BIT(value,2));
 698:	a8 01       	movw	r20, r16
 69a:	44 70       	andi	r20, 0x04	; 4
 69c:	50 70       	andi	r21, 0x00	; 0
 69e:	55 95       	asr	r21
 6a0:	47 95       	ror	r20
 6a2:	55 95       	asr	r21
 6a4:	47 95       	ror	r20
 6a6:	8c 2f       	mov	r24, r28
 6a8:	62 e0       	ldi	r22, 0x02	; 2
 6aa:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
	vDIO_WRITE_BIT(port,3,READ_BIT(value,3));
 6ae:	08 70       	andi	r16, 0x08	; 8
 6b0:	10 70       	andi	r17, 0x00	; 0
 6b2:	a8 01       	movw	r20, r16
 6b4:	55 95       	asr	r21
 6b6:	47 95       	ror	r20
 6b8:	55 95       	asr	r21
 6ba:	47 95       	ror	r20
 6bc:	55 95       	asr	r21
 6be:	47 95       	ror	r20
 6c0:	8c 2f       	mov	r24, r28
 6c2:	63 e0       	ldi	r22, 0x03	; 3
 6c4:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
}
 6c8:	cf 91       	pop	r28
 6ca:	1f 91       	pop	r17
 6cc:	0f 91       	pop	r16
 6ce:	08 95       	ret

000006d0 <vDIO_WRITE_HIGH_NIBBLE>:
void vDIO_WRITE_HIGH_NIBBLE(unsigned char port,unsigned char value)
{
 6d0:	0f 93       	push	r16
 6d2:	1f 93       	push	r17
 6d4:	cf 93       	push	r28
 6d6:	df 93       	push	r29
 6d8:	c8 2f       	mov	r28, r24
 6da:	d6 2f       	mov	r29, r22
	vDIO_WRITE_BIT(port,4,READ_BIT(value,4));
 6dc:	06 2f       	mov	r16, r22
 6de:	10 e0       	ldi	r17, 0x00	; 0
 6e0:	a8 01       	movw	r20, r16
 6e2:	40 71       	andi	r20, 0x10	; 16
 6e4:	50 70       	andi	r21, 0x00	; 0
 6e6:	55 95       	asr	r21
 6e8:	47 95       	ror	r20
 6ea:	55 95       	asr	r21
 6ec:	47 95       	ror	r20
 6ee:	55 95       	asr	r21
 6f0:	47 95       	ror	r20
 6f2:	55 95       	asr	r21
 6f4:	47 95       	ror	r20
 6f6:	64 e0       	ldi	r22, 0x04	; 4
 6f8:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
	vDIO_WRITE_BIT(port,5,READ_BIT(value,5));
 6fc:	a8 01       	movw	r20, r16
 6fe:	40 72       	andi	r20, 0x20	; 32
 700:	50 70       	andi	r21, 0x00	; 0
 702:	55 95       	asr	r21
 704:	47 95       	ror	r20
 706:	55 95       	asr	r21
 708:	47 95       	ror	r20
 70a:	55 95       	asr	r21
 70c:	47 95       	ror	r20
 70e:	55 95       	asr	r21
 710:	47 95       	ror	r20
 712:	55 95       	asr	r21
 714:	47 95       	ror	r20
 716:	8c 2f       	mov	r24, r28
 718:	65 e0       	ldi	r22, 0x05	; 5
 71a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
	vDIO_WRITE_BIT(port,6,READ_BIT(value,6));
 71e:	00 74       	andi	r16, 0x40	; 64
 720:	10 70       	andi	r17, 0x00	; 0
 722:	a8 01       	movw	r20, r16
 724:	04 2e       	mov	r0, r20
 726:	45 2f       	mov	r20, r21
 728:	00 0c       	add	r0, r0
 72a:	44 1f       	adc	r20, r20
 72c:	55 0b       	sbc	r21, r21
 72e:	00 0c       	add	r0, r0
 730:	44 1f       	adc	r20, r20
 732:	55 1f       	adc	r21, r21
 734:	8c 2f       	mov	r24, r28
 736:	66 e0       	ldi	r22, 0x06	; 6
 738:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
	vDIO_WRITE_BIT(port,7,READ_BIT(value,7));
 73c:	4d 2f       	mov	r20, r29
 73e:	44 1f       	adc	r20, r20
 740:	44 27       	eor	r20, r20
 742:	44 1f       	adc	r20, r20
 744:	8c 2f       	mov	r24, r28
 746:	67 e0       	ldi	r22, 0x07	; 7
 748:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
 74c:	df 91       	pop	r29
 74e:	cf 91       	pop	r28
 750:	1f 91       	pop	r17
 752:	0f 91       	pop	r16
 754:	08 95       	ret

00000756 <EEPROM_WRITE>:
#include "EEPROM.h"
#include "std_macros.h"
#include "LCD_config.h"
void EEPROM_WRITE(unsigned short address,unsigned char data)
{
	EEARL=(char)address;
 756:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);
 758:	9f bb       	out	0x1f, r25	; 31
	EEDR=data;
 75a:	6d bb       	out	0x1d, r22	; 29
	SET_BIT(EECR,EEMWE);
 75c:	e2 9a       	sbi	0x1c, 2	; 28
	SET_BIT(EECR,EEWE);
 75e:	e1 9a       	sbi	0x1c, 1	; 28
	while(READ_BIT(EECR,EEWE)==1);
 760:	e1 99       	sbic	0x1c, 1	; 28
 762:	fe cf       	rjmp	.-4      	; 0x760 <EEPROM_WRITE+0xa>
}
 764:	08 95       	ret

00000766 <EEPROM_READ>:
unsigned char EEPROM_READ( unsigned short address)
{
	EEARL=(char)address;
 766:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);
 768:	9f bb       	out	0x1f, r25	; 31
	SET_BIT(EECR,EERE);
 76a:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;
 76c:	8d b3       	in	r24, 0x1d	; 29
}
 76e:	08 95       	ret

00000770 <eeprom_readblock_from_address>:
	
void eeprom_readblock_from_address(const uint16 address2,uint8* data1,const uint16 size)
{
 770:	dc 01       	movw	r26, r24
	while(((EECR & (1<< EERE)) >>EEWE)==1);
 772:	8c b3       	in	r24, 0x1c	; 28
	uint16 counter=0;
	while(counter<size)
 774:	41 15       	cp	r20, r1
 776:	51 05       	cpc	r21, r1
 778:	89 f0       	breq	.+34     	; 0x79c <eeprom_readblock_from_address+0x2c>
 77a:	e6 2f       	mov	r30, r22
 77c:	f7 2f       	mov	r31, r23
}
	
void eeprom_readblock_from_address(const uint16 address2,uint8* data1,const uint16 size)
{
	while(((EECR & (1<< EERE)) >>EEWE)==1);
	uint16 counter=0;
 77e:	20 e0       	ldi	r18, 0x00	; 0
 780:	30 e0       	ldi	r19, 0x00	; 0
	EEARH=(char)(address>>8);
	SET_BIT(EECR,EERE);
	return EEDR;
}
	
void eeprom_readblock_from_address(const uint16 address2,uint8* data1,const uint16 size)
 782:	c9 01       	movw	r24, r18
 784:	8a 0f       	add	r24, r26
 786:	9b 1f       	adc	r25, r27
{
	while(((EECR & (1<< EERE)) >>EEWE)==1);
	uint16 counter=0;
	while(counter<size)
	{
		EEAR=address2+counter;
 788:	9f bb       	out	0x1f, r25	; 31
 78a:	8e bb       	out	0x1e, r24	; 30
		EECR|=(1<<EERE);
 78c:	e0 9a       	sbi	0x1c, 0	; 28
		*(data1+counter)=EEDR;
 78e:	8d b3       	in	r24, 0x1d	; 29
 790:	81 93       	st	Z+, r24
		counter++;
 792:	2f 5f       	subi	r18, 0xFF	; 255
 794:	3f 4f       	sbci	r19, 0xFF	; 255
	
void eeprom_readblock_from_address(const uint16 address2,uint8* data1,const uint16 size)
{
	while(((EECR & (1<< EERE)) >>EEWE)==1);
	uint16 counter=0;
	while(counter<size)
 796:	24 17       	cp	r18, r20
 798:	35 07       	cpc	r19, r21
 79a:	99 f7       	brne	.-26     	; 0x782 <eeprom_readblock_from_address+0x12>
 79c:	08 95       	ret

0000079e <eeprom_writebyte_to_address>:
		counter++;
	}
}
void eeprom_writebyte_to_address(const uint16 address2,const uint8 data2)
{
	while(((EECR & (1<< EERE)) >>EEWE)==1);
 79e:	2c b3       	in	r18, 0x1c	; 28
	EEAR=address2;
 7a0:	9f bb       	out	0x1f, r25	; 31
 7a2:	8e bb       	out	0x1e, r24	; 30
	EECR|=(1<<EERE);
 7a4:	e0 9a       	sbi	0x1c, 0	; 28
	if (EEDR !=data2)
 7a6:	8d b3       	in	r24, 0x1d	; 29
 7a8:	86 17       	cp	r24, r22
 7aa:	19 f0       	breq	.+6      	; 0x7b2 <eeprom_writebyte_to_address+0x14>
	{
		EEDR=data2;
 7ac:	6d bb       	out	0x1d, r22	; 29
		EECR|=(1<<EEMWE);
 7ae:	e2 9a       	sbi	0x1c, 2	; 28
		EECR|=(1<<EEWE);
 7b0:	e1 9a       	sbi	0x1c, 1	; 28
 7b2:	08 95       	ret

000007b4 <eeprom_writeblock_from_address>:
	}
}
void eeprom_writeblock_from_address(const uint16 address2,const uint8* data2,const uint16 size)
{
 7b4:	dc 01       	movw	r26, r24
	uint16 counter=0;
	
	while(counter < size)
 7b6:	41 15       	cp	r20, r1
 7b8:	51 05       	cpc	r21, r1
 7ba:	b9 f0       	breq	.+46     	; 0x7ea <eeprom_writeblock_from_address+0x36>
 7bc:	e6 2f       	mov	r30, r22
 7be:	f7 2f       	mov	r31, r23
		EECR|=(1<<EEWE);
	}
}
void eeprom_writeblock_from_address(const uint16 address2,const uint8* data2,const uint16 size)
{
	uint16 counter=0;
 7c0:	20 e0       	ldi	r18, 0x00	; 0
 7c2:	30 e0       	ldi	r19, 0x00	; 0
	
	while(counter < size)
	{
		while(((EECR & (1<< EERE)) >>EEWE)==1);
 7c4:	8c b3       	in	r24, 0x1c	; 28
		EEDR=data2;
		EECR|=(1<<EEMWE);
		EECR|=(1<<EEWE);
	}
}
void eeprom_writeblock_from_address(const uint16 address2,const uint8* data2,const uint16 size)
 7c6:	c9 01       	movw	r24, r18
 7c8:	8a 0f       	add	r24, r26
 7ca:	9b 1f       	adc	r25, r27
	uint16 counter=0;
	
	while(counter < size)
	{
		while(((EECR & (1<< EERE)) >>EEWE)==1);
		EEAR=address2+counter;
 7cc:	9f bb       	out	0x1f, r25	; 31
 7ce:	8e bb       	out	0x1e, r24	; 30
		EECR|=(1<<EERE);
 7d0:	e0 9a       	sbi	0x1c, 0	; 28
		if (EEDR != (*(data2+counter)))
 7d2:	9d b3       	in	r25, 0x1d	; 29
 7d4:	81 91       	ld	r24, Z+
 7d6:	98 17       	cp	r25, r24
 7d8:	19 f0       	breq	.+6      	; 0x7e0 <eeprom_writeblock_from_address+0x2c>
		{
			EEDR=*(data2+counter);
 7da:	8d bb       	out	0x1d, r24	; 29
			EECR|=(1<<EEMWE);
 7dc:	e2 9a       	sbi	0x1c, 2	; 28
			EECR|=(1<<EEWE);
 7de:	e1 9a       	sbi	0x1c, 1	; 28
		}
		else
		{
			
		}
		counter++;
 7e0:	2f 5f       	subi	r18, 0xFF	; 255
 7e2:	3f 4f       	sbci	r19, 0xFF	; 255
}
void eeprom_writeblock_from_address(const uint16 address2,const uint8* data2,const uint16 size)
{
	uint16 counter=0;
	
	while(counter < size)
 7e4:	24 17       	cp	r18, r20
 7e6:	35 07       	cpc	r19, r21
 7e8:	69 f7       	brne	.-38     	; 0x7c4 <eeprom_writeblock_from_address+0x10>
 7ea:	08 95       	ret

000007ec <keybad_vinit>:
#include "keybad.h"
void keybad_vinit(void)
{
	vDIO_SET_BIT_DIR(keybad_port,0,1);
 7ec:	84 e4       	ldi	r24, 0x44	; 68
 7ee:	60 e0       	ldi	r22, 0x00	; 0
 7f0:	41 e0       	ldi	r20, 0x01	; 1
 7f2:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,1,1);
 7f6:	84 e4       	ldi	r24, 0x44	; 68
 7f8:	61 e0       	ldi	r22, 0x01	; 1
 7fa:	41 e0       	ldi	r20, 0x01	; 1
 7fc:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,2,1);
 800:	84 e4       	ldi	r24, 0x44	; 68
 802:	62 e0       	ldi	r22, 0x02	; 2
 804:	41 e0       	ldi	r20, 0x01	; 1
 806:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,3,1);
 80a:	84 e4       	ldi	r24, 0x44	; 68
 80c:	63 e0       	ldi	r22, 0x03	; 3
 80e:	41 e0       	ldi	r20, 0x01	; 1
 810:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,4,0);
 814:	84 e4       	ldi	r24, 0x44	; 68
 816:	64 e0       	ldi	r22, 0x04	; 4
 818:	40 e0       	ldi	r20, 0x00	; 0
 81a:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,5,0);
 81e:	84 e4       	ldi	r24, 0x44	; 68
 820:	65 e0       	ldi	r22, 0x05	; 5
 822:	40 e0       	ldi	r20, 0x00	; 0
 824:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,6,0);
 828:	84 e4       	ldi	r24, 0x44	; 68
 82a:	66 e0       	ldi	r22, 0x06	; 6
 82c:	40 e0       	ldi	r20, 0x00	; 0
 82e:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,7,0);
 832:	84 e4       	ldi	r24, 0x44	; 68
 834:	67 e0       	ldi	r22, 0x07	; 7
 836:	40 e0       	ldi	r20, 0x00	; 0
 838:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_PULLUP_CONNECT(keybad_port,4,1);
 83c:	84 e4       	ldi	r24, 0x44	; 68
 83e:	64 e0       	ldi	r22, 0x04	; 4
 840:	41 e0       	ldi	r20, 0x01	; 1
 842:	0e 94 a7 02 	call	0x54e	; 0x54e <vDIO_PULLUP_CONNECT>
	vDIO_PULLUP_CONNECT(keybad_port,5,1);
 846:	84 e4       	ldi	r24, 0x44	; 68
 848:	65 e0       	ldi	r22, 0x05	; 5
 84a:	41 e0       	ldi	r20, 0x01	; 1
 84c:	0e 94 a7 02 	call	0x54e	; 0x54e <vDIO_PULLUP_CONNECT>
	vDIO_PULLUP_CONNECT(keybad_port,6,1);
 850:	84 e4       	ldi	r24, 0x44	; 68
 852:	66 e0       	ldi	r22, 0x06	; 6
 854:	41 e0       	ldi	r20, 0x01	; 1
 856:	0e 94 a7 02 	call	0x54e	; 0x54e <vDIO_PULLUP_CONNECT>
	vDIO_PULLUP_CONNECT(keybad_port,7,1);
 85a:	84 e4       	ldi	r24, 0x44	; 68
 85c:	67 e0       	ldi	r22, 0x07	; 7
 85e:	41 e0       	ldi	r20, 0x01	; 1
 860:	0e 94 a7 02 	call	0x54e	; 0x54e <vDIO_PULLUP_CONNECT>
}
 864:	08 95       	ret

00000866 <keybad_u8read_press>:
char keybad_u8read_press()
{
 866:	0f 93       	push	r16
 868:	1f 93       	push	r17
 86a:	cf 93       	push	r28
 86c:	df 93       	push	r29
 86e:	cd b7       	in	r28, 0x3d	; 61
 870:	de b7       	in	r29, 0x3e	; 62
 872:	60 97       	sbiw	r28, 0x10	; 16
 874:	0f b6       	in	r0, 0x3f	; 63
 876:	f8 94       	cli
 878:	de bf       	out	0x3e, r29	; 62
 87a:	0f be       	out	0x3f, r0	; 63
 87c:	cd bf       	out	0x3d, r28	; 61
	char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
 87e:	de 01       	movw	r26, r28
 880:	11 96       	adiw	r26, 0x01	; 1
 882:	e0 e6       	ldi	r30, 0x60	; 96
 884:	f0 e0       	ldi	r31, 0x00	; 0
 886:	80 e1       	ldi	r24, 0x10	; 16
 888:	01 90       	ld	r0, Z+
 88a:	0d 92       	st	X+, r0
 88c:	81 50       	subi	r24, 0x01	; 1
 88e:	e1 f7       	brne	.-8      	; 0x888 <keybad_u8read_press+0x22>
	char row,colum,val;
	char returnval=notpassed;
	for(row=0;row<4;row++)
 890:	00 e0       	ldi	r16, 0x00	; 0
	{
		vDIO_WRITE_BIT(keybad_port,0,1);
 892:	84 e4       	ldi	r24, 0x44	; 68
 894:	60 e0       	ldi	r22, 0x00	; 0
 896:	41 e0       	ldi	r20, 0x01	; 1
 898:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
		vDIO_WRITE_BIT(keybad_port,1,1);
 89c:	84 e4       	ldi	r24, 0x44	; 68
 89e:	61 e0       	ldi	r22, 0x01	; 1
 8a0:	41 e0       	ldi	r20, 0x01	; 1
 8a2:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
		vDIO_WRITE_BIT(keybad_port,2,1);
 8a6:	84 e4       	ldi	r24, 0x44	; 68
 8a8:	62 e0       	ldi	r22, 0x02	; 2
 8aa:	41 e0       	ldi	r20, 0x01	; 1
 8ac:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
		vDIO_WRITE_BIT(keybad_port,3,1);
 8b0:	84 e4       	ldi	r24, 0x44	; 68
 8b2:	63 e0       	ldi	r22, 0x03	; 3
 8b4:	41 e0       	ldi	r20, 0x01	; 1
 8b6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
		vDIO_WRITE_BIT(keybad_port,row,0);
 8ba:	84 e4       	ldi	r24, 0x44	; 68
 8bc:	60 2f       	mov	r22, r16
 8be:	40 e0       	ldi	r20, 0x00	; 0
 8c0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
		for(colum=0;colum<4;colum++)
 8c4:	10 e0       	ldi	r17, 0x00	; 0
	vDIO_PULLUP_CONNECT(keybad_port,4,1);
	vDIO_PULLUP_CONNECT(keybad_port,5,1);
	vDIO_PULLUP_CONNECT(keybad_port,6,1);
	vDIO_PULLUP_CONNECT(keybad_port,7,1);
}
char keybad_u8read_press()
 8c6:	61 2f       	mov	r22, r17
 8c8:	6c 5f       	subi	r22, 0xFC	; 252
		vDIO_WRITE_BIT(keybad_port,2,1);
		vDIO_WRITE_BIT(keybad_port,3,1);
		vDIO_WRITE_BIT(keybad_port,row,0);
		for(colum=0;colum<4;colum++)
		{
		val=u8DIO_READ_BIT(keybad_port,(colum+4));
 8ca:	84 e4       	ldi	r24, 0x44	; 68
 8cc:	0e 94 bf 01 	call	0x37e	; 0x37e <u8DIO_READ_BIT>
		if(val==0)
 8d0:	88 23       	and	r24, r24
 8d2:	61 f4       	brne	.+24     	; 0x8ec <keybad_u8read_press+0x86>
			{
			returnval=arr[row][colum];
 8d4:	e0 2f       	mov	r30, r16
 8d6:	f0 e0       	ldi	r31, 0x00	; 0
 8d8:	ee 0f       	add	r30, r30
 8da:	ff 1f       	adc	r31, r31
 8dc:	ee 0f       	add	r30, r30
 8de:	ff 1f       	adc	r31, r31
 8e0:	e1 0f       	add	r30, r17
 8e2:	f1 1d       	adc	r31, r1
 8e4:	ec 0f       	add	r30, r28
 8e6:	fd 1f       	adc	r31, r29
 8e8:	81 81       	ldd	r24, Z+1	; 0x01
 8ea:	04 c0       	rjmp	.+8      	; 0x8f4 <keybad_u8read_press+0x8e>
		vDIO_WRITE_BIT(keybad_port,0,1);
		vDIO_WRITE_BIT(keybad_port,1,1);
		vDIO_WRITE_BIT(keybad_port,2,1);
		vDIO_WRITE_BIT(keybad_port,3,1);
		vDIO_WRITE_BIT(keybad_port,row,0);
		for(colum=0;colum<4;colum++)
 8ec:	1f 5f       	subi	r17, 0xFF	; 255
 8ee:	14 30       	cpi	r17, 0x04	; 4
 8f0:	51 f7       	brne	.-44     	; 0x8c6 <keybad_u8read_press+0x60>
 8f2:	0b c0       	rjmp	.+22     	; 0x90a <keybad_u8read_press+0xa4>
			{
			break;
			}
	}
	return returnval;
 8f4:	60 96       	adiw	r28, 0x10	; 16
 8f6:	0f b6       	in	r0, 0x3f	; 63
 8f8:	f8 94       	cli
 8fa:	de bf       	out	0x3e, r29	; 62
 8fc:	0f be       	out	0x3f, r0	; 63
 8fe:	cd bf       	out	0x3d, r28	; 61
 900:	df 91       	pop	r29
 902:	cf 91       	pop	r28
 904:	1f 91       	pop	r17
 906:	0f 91       	pop	r16
 908:	08 95       	ret
char keybad_u8read_press()
{
	char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	char row,colum,val;
	char returnval=notpassed;
	for(row=0;row<4;row++)
 90a:	0f 5f       	subi	r16, 0xFF	; 255
 90c:	04 30       	cpi	r16, 0x04	; 4
 90e:	09 f6       	brne	.-126    	; 0x892 <keybad_u8read_press+0x2c>
 910:	8f ef       	ldi	r24, 0xFF	; 255
 912:	f0 cf       	rjmp	.-32     	; 0x8f4 <keybad_u8read_press+0x8e>

00000914 <LCD_ENABLE>:
	#endif

}
static void LCD_ENABLE(void)
{
	vDIO_WRITE_BIT(LCD_CONTROL,EN,1);
 914:	82 e4       	ldi	r24, 0x42	; 66
 916:	60 e0       	ldi	r22, 0x00	; 0
 918:	41 e0       	ldi	r20, 0x01	; 1
 91a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 91e:	8f e9       	ldi	r24, 0x9F	; 159
 920:	9f e0       	ldi	r25, 0x0F	; 15
 922:	01 97       	sbiw	r24, 0x01	; 1
 924:	f1 f7       	brne	.-4      	; 0x922 <LCD_ENABLE+0xe>
 926:	00 c0       	rjmp	.+0      	; 0x928 <LCD_ENABLE+0x14>
 928:	00 00       	nop
	_delay_ms(2);
	vDIO_WRITE_BIT(LCD_CONTROL,EN,0);
 92a:	82 e4       	ldi	r24, 0x42	; 66
 92c:	60 e0       	ldi	r22, 0x00	; 0
 92e:	40 e0       	ldi	r20, 0x00	; 0
 930:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
 934:	8f e9       	ldi	r24, 0x9F	; 159
 936:	9f e0       	ldi	r25, 0x0F	; 15
 938:	01 97       	sbiw	r24, 0x01	; 1
 93a:	f1 f7       	brne	.-4      	; 0x938 <LCD_ENABLE+0x24>
 93c:	00 c0       	rjmp	.+0      	; 0x93e <LCD_ENABLE+0x2a>
 93e:	00 00       	nop
	_delay_ms(2);
	
}
 940:	08 95       	ret

00000942 <LCD_SEND_CHAR>:
	
	#endif
	
}
void LCD_SEND_CHAR( char data)
{
 942:	68 2f       	mov	r22, r24
	#if defined eight_bit_mode
	vDIO_WRITE_PORT(LCD_DATA,data);
 944:	81 e4       	ldi	r24, 0x41	; 65
 946:	0e 94 42 02 	call	0x484	; 0x484 <vDIO_WRITE_PORT>
	vDIO_WRITE_BIT(LCD_CONTROL,RS,1);
 94a:	82 e4       	ldi	r24, 0x42	; 66
 94c:	62 e0       	ldi	r22, 0x02	; 2
 94e:	41 e0       	ldi	r20, 0x01	; 1
 950:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
	LCD_ENABLE();
 954:	0e 94 8a 04 	call	0x914	; 0x914 <LCD_ENABLE>
	vDIO_WRITE_HIGH_NIBBLE(LCD_DATA,data);
	LCD_ENABLE();
	_delay_ms(1);
	#endif

}
 958:	08 95       	ret

0000095a <LCD_SEND_CMD>:
	vDIO_WRITE_BIT(LCD_CONTROL,EN,0);
	_delay_ms(2);
	
}
void LCD_SEND_CMD( char cmd)
{
 95a:	68 2f       	mov	r22, r24
	#if defined eight_bit_mode
	vDIO_WRITE_PORT(LCD_DATA,cmd);
 95c:	81 e4       	ldi	r24, 0x41	; 65
 95e:	0e 94 42 02 	call	0x484	; 0x484 <vDIO_WRITE_PORT>
	vDIO_WRITE_BIT(LCD_CONTROL,RS,0);
 962:	82 e4       	ldi	r24, 0x42	; 66
 964:	62 e0       	ldi	r22, 0x02	; 2
 966:	40 e0       	ldi	r20, 0x00	; 0
 968:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
	LCD_ENABLE();
 96c:	0e 94 8a 04 	call	0x914	; 0x914 <LCD_ENABLE>
 970:	8f ec       	ldi	r24, 0xCF	; 207
 972:	97 e0       	ldi	r25, 0x07	; 7
 974:	01 97       	sbiw	r24, 0x01	; 1
 976:	f1 f7       	brne	.-4      	; 0x974 <LCD_SEND_CMD+0x1a>
 978:	00 c0       	rjmp	.+0      	; 0x97a <LCD_SEND_CMD+0x20>
 97a:	00 00       	nop
	vDIO_WRITE_BIT(LCD_CONTROL,RS,0);
	LCD_ENABLE();
	_delay_ms(1);
	#endif
	
}
 97c:	08 95       	ret

0000097e <LCD_INIT>:
 97e:	8f ef       	ldi	r24, 0xFF	; 255
 980:	91 ee       	ldi	r25, 0xE1	; 225
 982:	a4 e0       	ldi	r26, 0x04	; 4
 984:	81 50       	subi	r24, 0x01	; 1
 986:	90 40       	sbci	r25, 0x00	; 0
 988:	a0 40       	sbci	r26, 0x00	; 0
 98a:	e1 f7       	brne	.-8      	; 0x984 <LCD_INIT+0x6>
 98c:	00 c0       	rjmp	.+0      	; 0x98e <LCD_INIT+0x10>
 98e:	00 00       	nop

void LCD_INIT(void)
{
	_delay_ms(200);
	#if defined eight_bit_mode
	vDIO_SET_BIT_DIR(LCD_DATA,0,1);
 990:	81 e4       	ldi	r24, 0x41	; 65
 992:	60 e0       	ldi	r22, 0x00	; 0
 994:	41 e0       	ldi	r20, 0x01	; 1
 996:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,1,1);
 99a:	81 e4       	ldi	r24, 0x41	; 65
 99c:	61 e0       	ldi	r22, 0x01	; 1
 99e:	41 e0       	ldi	r20, 0x01	; 1
 9a0:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,2,1);
 9a4:	81 e4       	ldi	r24, 0x41	; 65
 9a6:	62 e0       	ldi	r22, 0x02	; 2
 9a8:	41 e0       	ldi	r20, 0x01	; 1
 9aa:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,3,1);
 9ae:	81 e4       	ldi	r24, 0x41	; 65
 9b0:	63 e0       	ldi	r22, 0x03	; 3
 9b2:	41 e0       	ldi	r20, 0x01	; 1
 9b4:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,4,1);
 9b8:	81 e4       	ldi	r24, 0x41	; 65
 9ba:	64 e0       	ldi	r22, 0x04	; 4
 9bc:	41 e0       	ldi	r20, 0x01	; 1
 9be:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,5,1);
 9c2:	81 e4       	ldi	r24, 0x41	; 65
 9c4:	65 e0       	ldi	r22, 0x05	; 5
 9c6:	41 e0       	ldi	r20, 0x01	; 1
 9c8:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,6,1);
 9cc:	81 e4       	ldi	r24, 0x41	; 65
 9ce:	66 e0       	ldi	r22, 0x06	; 6
 9d0:	41 e0       	ldi	r20, 0x01	; 1
 9d2:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,7,1);
 9d6:	81 e4       	ldi	r24, 0x41	; 65
 9d8:	67 e0       	ldi	r22, 0x07	; 7
 9da:	41 e0       	ldi	r20, 0x01	; 1
 9dc:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_CONTROL,EN,1);
 9e0:	82 e4       	ldi	r24, 0x42	; 66
 9e2:	60 e0       	ldi	r22, 0x00	; 0
 9e4:	41 e0       	ldi	r20, 0x01	; 1
 9e6:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_CONTROL,RS,1);
 9ea:	82 e4       	ldi	r24, 0x42	; 66
 9ec:	62 e0       	ldi	r22, 0x02	; 2
 9ee:	41 e0       	ldi	r20, 0x01	; 1
 9f0:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_CONTROL,WR,1);
 9f4:	82 e4       	ldi	r24, 0x42	; 66
 9f6:	61 e0       	ldi	r22, 0x01	; 1
 9f8:	41 e0       	ldi	r20, 0x01	; 1
 9fa:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	vDIO_WRITE_BIT(LCD_CONTROL,WR,0);
 9fe:	82 e4       	ldi	r24, 0x42	; 66
 a00:	61 e0       	ldi	r22, 0x01	; 1
 a02:	40 e0       	ldi	r20, 0x00	; 0
 a04:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
	LCD_SEND_CMD(RET_HOME);
 a08:	82 e0       	ldi	r24, 0x02	; 2
 a0a:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_SEND_CMD>
 a0e:	af e1       	ldi	r26, 0x1F	; 31
 a10:	be e4       	ldi	r27, 0x4E	; 78
 a12:	11 97       	sbiw	r26, 0x01	; 1
 a14:	f1 f7       	brne	.-4      	; 0xa12 <LCD_INIT+0x94>
 a16:	00 c0       	rjmp	.+0      	; 0xa18 <LCD_INIT+0x9a>
 a18:	00 00       	nop
	_delay_ms(10);
	LCD_SEND_CMD(EIGHT_BIT);
 a1a:	88 e3       	ldi	r24, 0x38	; 56
 a1c:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_SEND_CMD>
 a20:	8f ec       	ldi	r24, 0xCF	; 207
 a22:	97 e0       	ldi	r25, 0x07	; 7
 a24:	01 97       	sbiw	r24, 0x01	; 1
 a26:	f1 f7       	brne	.-4      	; 0xa24 <LCD_INIT+0xa6>
 a28:	00 c0       	rjmp	.+0      	; 0xa2a <LCD_INIT+0xac>
 a2a:	00 00       	nop
	_delay_ms(1);
	LCD_SEND_CMD(DISPLAY_CURSOR);
 a2c:	8e e0       	ldi	r24, 0x0E	; 14
 a2e:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_SEND_CMD>
 a32:	af ec       	ldi	r26, 0xCF	; 207
 a34:	b7 e0       	ldi	r27, 0x07	; 7
 a36:	11 97       	sbiw	r26, 0x01	; 1
 a38:	f1 f7       	brne	.-4      	; 0xa36 <LCD_INIT+0xb8>
 a3a:	00 c0       	rjmp	.+0      	; 0xa3c <LCD_INIT+0xbe>
 a3c:	00 00       	nop
	_delay_ms(1);
	LCD_SEND_CMD(CLR_SCREEN);
 a3e:	81 e0       	ldi	r24, 0x01	; 1
 a40:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_SEND_CMD>
 a44:	8f ec       	ldi	r24, 0xCF	; 207
 a46:	97 e0       	ldi	r25, 0x07	; 7
 a48:	01 97       	sbiw	r24, 0x01	; 1
 a4a:	f1 f7       	brne	.-4      	; 0xa48 <LCD_INIT+0xca>
 a4c:	00 c0       	rjmp	.+0      	; 0xa4e <LCD_INIT+0xd0>
 a4e:	00 00       	nop
	_delay_ms(1);
	LCD_SEND_CMD(ENTRY_MODE);
 a50:	86 e0       	ldi	r24, 0x06	; 6
 a52:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_SEND_CMD>
 a56:	af ec       	ldi	r26, 0xCF	; 207
 a58:	b7 e0       	ldi	r27, 0x07	; 7
 a5a:	11 97       	sbiw	r26, 0x01	; 1
 a5c:	f1 f7       	brne	.-4      	; 0xa5a <LCD_INIT+0xdc>
 a5e:	00 c0       	rjmp	.+0      	; 0xa60 <LCD_INIT+0xe2>
 a60:	00 00       	nop
	LCD_SEND_CMD(ENTRY_MODE);
	_delay_ms(1);
	
	#endif
	
}
 a62:	08 95       	ret

00000a64 <LCD_clear_screen>:
	#endif
	
}
void LCD_clear_screen(void)
{
	LCD_SEND_CMD(CLR_SCREEN);
 a64:	81 e0       	ldi	r24, 0x01	; 1
 a66:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_SEND_CMD>
 a6a:	8f e1       	ldi	r24, 0x1F	; 31
 a6c:	9e e4       	ldi	r25, 0x4E	; 78
 a6e:	01 97       	sbiw	r24, 0x01	; 1
 a70:	f1 f7       	brne	.-4      	; 0xa6e <LCD_clear_screen+0xa>
 a72:	00 c0       	rjmp	.+0      	; 0xa74 <LCD_clear_screen+0x10>
 a74:	00 00       	nop
	_delay_ms(10);
}
 a76:	08 95       	ret

00000a78 <LCD_SEND_STRING>:

void LCD_SEND_STRING( char *data)
{
 a78:	cf 93       	push	r28
 a7a:	df 93       	push	r29
 a7c:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 a7e:	88 81       	ld	r24, Y
 a80:	88 23       	and	r24, r24
 a82:	31 f0       	breq	.+12     	; 0xa90 <LCD_SEND_STRING+0x18>
{
	LCD_SEND_CMD(CLR_SCREEN);
	_delay_ms(10);
}

void LCD_SEND_STRING( char *data)
 a84:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_SEND_CHAR(*data);
 a86:	0e 94 a1 04 	call	0x942	; 0x942 <LCD_SEND_CHAR>
	_delay_ms(10);
}

void LCD_SEND_STRING( char *data)
{
	while((*data)!='\0')
 a8a:	89 91       	ld	r24, Y+
 a8c:	88 23       	and	r24, r24
 a8e:	d9 f7       	brne	.-10     	; 0xa86 <LCD_SEND_STRING+0xe>
	{
		LCD_SEND_CHAR(*data);
		data++;
	}
}
 a90:	df 91       	pop	r29
 a92:	cf 91       	pop	r28
 a94:	08 95       	ret

00000a96 <LCD_MOVE_CURSOR>:
void LCD_MOVE_CURSOR( char row, char colum)
{
	char val;
	if(row>2||row<1||colum>16||colum<1)
 a96:	28 2f       	mov	r18, r24
 a98:	21 50       	subi	r18, 0x01	; 1
 a9a:	22 30       	cpi	r18, 0x02	; 2
 a9c:	70 f4       	brcc	.+28     	; 0xaba <LCD_MOVE_CURSOR+0x24>
 a9e:	61 31       	cpi	r22, 0x11	; 17
 aa0:	70 f4       	brcc	.+28     	; 0xabe <LCD_MOVE_CURSOR+0x28>
 aa2:	66 23       	and	r22, r22
 aa4:	71 f0       	breq	.+28     	; 0xac2 <LCD_MOVE_CURSOR+0x2c>
	{
		val=0x80;
	}
	else if(row==1)
 aa6:	81 30       	cpi	r24, 0x01	; 1
 aa8:	19 f4       	brne	.+6      	; 0xab0 <LCD_MOVE_CURSOR+0x1a>
	{
		val=0x80+(colum-1);
 aaa:	96 2f       	mov	r25, r22
 aac:	91 58       	subi	r25, 0x81	; 129
 aae:	0a c0       	rjmp	.+20     	; 0xac4 <LCD_MOVE_CURSOR+0x2e>
	}
	else if(row==2)
 ab0:	82 30       	cpi	r24, 0x02	; 2
 ab2:	41 f4       	brne	.+16     	; 0xac4 <LCD_MOVE_CURSOR+0x2e>
	{
		val=0xC0+(colum-1);
 ab4:	96 2f       	mov	r25, r22
 ab6:	91 54       	subi	r25, 0x41	; 65
 ab8:	05 c0       	rjmp	.+10     	; 0xac4 <LCD_MOVE_CURSOR+0x2e>
void LCD_MOVE_CURSOR( char row, char colum)
{
	char val;
	if(row>2||row<1||colum>16||colum<1)
	{
		val=0x80;
 aba:	90 e8       	ldi	r25, 0x80	; 128
 abc:	03 c0       	rjmp	.+6      	; 0xac4 <LCD_MOVE_CURSOR+0x2e>
 abe:	90 e8       	ldi	r25, 0x80	; 128
 ac0:	01 c0       	rjmp	.+2      	; 0xac4 <LCD_MOVE_CURSOR+0x2e>
 ac2:	90 e8       	ldi	r25, 0x80	; 128
	else if(row==2)
	{
		val=0xC0+(colum-1);
	}	
	
	LCD_SEND_CMD(val);
 ac4:	89 2f       	mov	r24, r25
 ac6:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_SEND_CMD>
 aca:	8f ec       	ldi	r24, 0xCF	; 207
 acc:	97 e0       	ldi	r25, 0x07	; 7
 ace:	01 97       	sbiw	r24, 0x01	; 1
 ad0:	f1 f7       	brne	.-4      	; 0xace <LCD_MOVE_CURSOR+0x38>
 ad2:	00 c0       	rjmp	.+0      	; 0xad4 <LCD_MOVE_CURSOR+0x3e>
 ad4:	00 00       	nop
	_delay_ms(1);	 
}
 ad6:	08 95       	ret

00000ad8 <vLed_init>:

#include "DIO.h"
void vLed_init(unsigned char port, unsigned char pin)
{
	vDIO_SET_BIT_DIR(port,pin,1);
 ad8:	41 e0       	ldi	r20, 0x01	; 1
 ada:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
}
 ade:	08 95       	ret

00000ae0 <vLed_on>:
void vLed_on(unsigned char port,unsigned char pin)
{
	vDIO_WRITE_BIT(port,pin,1);
 ae0:	41 e0       	ldi	r20, 0x01	; 1
 ae2:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
}
 ae6:	08 95       	ret

00000ae8 <vLed_off>:
void vLed_off(unsigned char port,unsigned char pin)
{
	vDIO_WRITE_BIT(port,pin,0);
 ae8:	40 e0       	ldi	r20, 0x00	; 0
 aea:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
}
 aee:	08 95       	ret

00000af0 <vLed_toggle>:
void vLed_toggle(unsigned char port,unsigned char pin)
{
	vDIO_TOGGLE_BIT(port,pin);
 af0:	0e 94 72 01 	call	0x2e4	; 0x2e4 <vDIO_TOGGLE_BIT>
}
 af4:	08 95       	ret

00000af6 <main>:
#define EEPROM_LOCATION4 0X04
#define max_tries 3
char arr[4];
unsigned char x =0;
int main(void)
{
 af6:	2f 92       	push	r2
 af8:	3f 92       	push	r3
 afa:	4f 92       	push	r4
 afc:	5f 92       	push	r5
 afe:	6f 92       	push	r6
 b00:	7f 92       	push	r7
 b02:	8f 92       	push	r8
 b04:	9f 92       	push	r9
 b06:	af 92       	push	r10
 b08:	bf 92       	push	r11
 b0a:	cf 92       	push	r12
 b0c:	df 92       	push	r13
 b0e:	ff 92       	push	r15
 b10:	0f 93       	push	r16
 b12:	1f 93       	push	r17
 b14:	cf 93       	push	r28
 b16:	df 93       	push	r29
	
	unsigned char value=notpassed;
	unsigned char flag=0,counter1;
	unsigned char max=max_tries;
    LCD_SEND_CMD(0x0C);
 b18:	8c e0       	ldi	r24, 0x0C	; 12
 b1a:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_SEND_CMD>
	keybad_vinit();
 b1e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <keybad_vinit>
	LCD_INIT();
 b22:	0e 94 bf 04 	call	0x97e	; 0x97e <LCD_INIT>
	LCD_MOVE_CURSOR(1,5);
 b26:	81 e0       	ldi	r24, 0x01	; 1
 b28:	65 e0       	ldi	r22, 0x05	; 5
 b2a:	0e 94 4b 05 	call	0xa96	; 0xa96 <LCD_MOVE_CURSOR>
	LCD_SEND_STRING("Welcome");
 b2e:	80 e7       	ldi	r24, 0x70	; 112
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_SEND_STRING>
	LCD_MOVE_CURSOR(2,1);
 b36:	82 e0       	ldi	r24, 0x02	; 2
 b38:	61 e0       	ldi	r22, 0x01	; 1
 b3a:	0e 94 4b 05 	call	0xa96	; 0xa96 <LCD_MOVE_CURSOR>
	LCD_SEND_STRING("Electronic Safe");
 b3e:	88 e7       	ldi	r24, 0x78	; 120
 b40:	90 e0       	ldi	r25, 0x00	; 0
 b42:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_SEND_STRING>
 b46:	8f ef       	ldi	r24, 0xFF	; 255
 b48:	95 ea       	ldi	r25, 0xA5	; 165
 b4a:	ae e0       	ldi	r26, 0x0E	; 14
 b4c:	81 50       	subi	r24, 0x01	; 1
 b4e:	90 40       	sbci	r25, 0x00	; 0
 b50:	a0 40       	sbci	r26, 0x00	; 0
 b52:	e1 f7       	brne	.-8      	; 0xb4c <main+0x56>
 b54:	00 c0       	rjmp	.+0      	; 0xb56 <main+0x60>
 b56:	00 00       	nop
	_delay_ms(6000);
	LCD_clear_screen();
 b58:	0e 94 32 05 	call	0xa64	; 0xa64 <LCD_clear_screen>
	vLed_init('c',1);
 b5c:	83 e6       	ldi	r24, 0x63	; 99
 b5e:	90 e0       	ldi	r25, 0x00	; 0
 b60:	61 e0       	ldi	r22, 0x01	; 1
 b62:	70 e0       	ldi	r23, 0x00	; 0
 b64:	0e 94 6c 05 	call	0xad8	; 0xad8 <vLed_init>
	vDIO_SET_BIT_DIR('c',4,1);
 b68:	83 e6       	ldi	r24, 0x63	; 99
 b6a:	64 e0       	ldi	r22, 0x04	; 4
 b6c:	41 e0       	ldi	r20, 0x01	; 1
 b6e:	0e 94 50 00 	call	0xa0	; 0xa0 <vDIO_SET_BIT_DIR>
	if (EEPROM_READ(EEPROM_STATUS)==notpassed)//Set
 b72:	80 e2       	ldi	r24, 0x20	; 32
 b74:	90 e0       	ldi	r25, 0x00	; 0
 b76:	0e 94 b3 03 	call	0x766	; 0x766 <EEPROM_READ>
 b7a:	8f 3f       	cpi	r24, 0xFF	; 255
 b7c:	91 05       	cpc	r25, r1
 b7e:	09 f0       	breq	.+2      	; 0xb82 <main+0x8c>
 b80:	41 c0       	rjmp	.+130    	; 0xc04 <main+0x10e>
	{
			LCD_SEND_STRING("set passward:");
 b82:	88 e8       	ldi	r24, 0x88	; 136
 b84:	90 e0       	ldi	r25, 0x00	; 0
 b86:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_SEND_STRING>
			LCD_MOVE_CURSOR(2,7);
 b8a:	82 e0       	ldi	r24, 0x02	; 2
 b8c:	67 e0       	ldi	r22, 0x07	; 7
 b8e:	0e 94 4b 05 	call	0xa96	; 0xa96 <LCD_MOVE_CURSOR>
 b92:	c1 e0       	ldi	r28, 0x01	; 1
 b94:	d0 e0       	ldi	r29, 0x00	; 0
			for(counter1=0;counter1<=3;counter1++)
			{
				do 
				{
				value=keybad_u8read_press();
 b96:	0e 94 33 04 	call	0x866	; 0x866 <keybad_u8read_press>
 b9a:	08 2f       	mov	r16, r24
				}while(value==notpassed);
 b9c:	8f 3f       	cpi	r24, 0xFF	; 255
 b9e:	d9 f3       	breq	.-10     	; 0xb96 <main+0xa0>
#define EEPROM_LOCATION3 0X03
#define EEPROM_LOCATION4 0X04
#define max_tries 3
char arr[4];
unsigned char x =0;
int main(void)
 ba0:	fc 2e       	mov	r15, r28
 ba2:	96 e0       	ldi	r25, 0x06	; 6
 ba4:	f9 0e       	add	r15, r25
			{
				do 
				{
				value=keybad_u8read_press();
				}while(value==notpassed);
				LCD_MOVE_CURSOR(2,counter1+7);
 ba6:	82 e0       	ldi	r24, 0x02	; 2
 ba8:	6f 2d       	mov	r22, r15
 baa:	0e 94 4b 05 	call	0xa96	; 0xa96 <LCD_MOVE_CURSOR>
				LCD_SEND_CHAR(value);
 bae:	80 2f       	mov	r24, r16
 bb0:	0e 94 a1 04 	call	0x942	; 0x942 <LCD_SEND_CHAR>
 bb4:	8f ef       	ldi	r24, 0xFF	; 255
 bb6:	90 e7       	ldi	r25, 0x70	; 112
 bb8:	a2 e0       	ldi	r26, 0x02	; 2
 bba:	81 50       	subi	r24, 0x01	; 1
 bbc:	90 40       	sbci	r25, 0x00	; 0
 bbe:	a0 40       	sbci	r26, 0x00	; 0
 bc0:	e1 f7       	brne	.-8      	; 0xbba <main+0xc4>
 bc2:	00 c0       	rjmp	.+0      	; 0xbc4 <main+0xce>
 bc4:	00 00       	nop
				_delay_ms(1000);
				LCD_MOVE_CURSOR(2,counter1+7);
 bc6:	82 e0       	ldi	r24, 0x02	; 2
 bc8:	6f 2d       	mov	r22, r15
 bca:	0e 94 4b 05 	call	0xa96	; 0xa96 <LCD_MOVE_CURSOR>
				LCD_SEND_CHAR('*');
 bce:	8a e2       	ldi	r24, 0x2A	; 42
 bd0:	0e 94 a1 04 	call	0x942	; 0x942 <LCD_SEND_CHAR>
 bd4:	8f e7       	ldi	r24, 0x7F	; 127
 bd6:	98 e3       	ldi	r25, 0x38	; 56
 bd8:	a1 e0       	ldi	r26, 0x01	; 1
 bda:	81 50       	subi	r24, 0x01	; 1
 bdc:	90 40       	sbci	r25, 0x00	; 0
 bde:	a0 40       	sbci	r26, 0x00	; 0
 be0:	e1 f7       	brne	.-8      	; 0xbda <main+0xe4>
 be2:	00 c0       	rjmp	.+0      	; 0xbe4 <main+0xee>
 be4:	00 00       	nop
				_delay_ms(500);
				EEPROM_WRITE(EEPROM_LOCATION1+counter1,value);
 be6:	ce 01       	movw	r24, r28
 be8:	60 2f       	mov	r22, r16
 bea:	70 e0       	ldi	r23, 0x00	; 0
 bec:	0e 94 ab 03 	call	0x756	; 0x756 <EEPROM_WRITE>
 bf0:	21 96       	adiw	r28, 0x01	; 1
	vDIO_SET_BIT_DIR('c',4,1);
	if (EEPROM_READ(EEPROM_STATUS)==notpassed)//Set
	{
			LCD_SEND_STRING("set passward:");
			LCD_MOVE_CURSOR(2,7);
			for(counter1=0;counter1<=3;counter1++)
 bf2:	c5 30       	cpi	r28, 0x05	; 5
 bf4:	d1 05       	cpc	r29, r1
 bf6:	79 f6       	brne	.-98     	; 0xb96 <main+0xa0>
				LCD_MOVE_CURSOR(2,counter1+7);
				LCD_SEND_CHAR('*');
				_delay_ms(500);
				EEPROM_WRITE(EEPROM_LOCATION1+counter1,value);
			}
			EEPROM_WRITE(EEPROM_STATUS,0x00);			
 bf8:	80 e2       	ldi	r24, 0x20	; 32
 bfa:	90 e0       	ldi	r25, 0x00	; 0
 bfc:	60 e0       	ldi	r22, 0x00	; 0
 bfe:	70 e0       	ldi	r23, 0x00	; 0
 c00:	0e 94 ab 03 	call	0x756	; 0x756 <EEPROM_WRITE>
	vLed_init('c',1);
	vDIO_SET_BIT_DIR('c',4,1);
	if (EEPROM_READ(EEPROM_STATUS)==notpassed)//Set
	{
			LCD_SEND_STRING("set passward:");
			LCD_MOVE_CURSOR(2,7);
 c04:	0f 2e       	mov	r0, r31
 c06:	f3 e0       	ldi	r31, 0x03	; 3
 c08:	ff 2e       	mov	r15, r31
 c0a:	f0 2d       	mov	r31, r0
		}
// 	else if (EEPROM_READ(EEPROM_STATUS)!=notpassed)
// 		{
		while(flag==0)//Check
		{
			arr[0]=arr[1]=arr[2]=arr[3]=notpassed;
 c0c:	0f 2e       	mov	r0, r31
 c0e:	f4 ef       	ldi	r31, 0xF4	; 244
 c10:	cf 2e       	mov	r12, r31
 c12:	f0 e0       	ldi	r31, 0x00	; 0
 c14:	df 2e       	mov	r13, r31
 c16:	f0 2d       	mov	r31, r0
 c18:	df ef       	ldi	r29, 0xFF	; 255
 c1a:	56 01       	movw	r10, r12
 c1c:	08 94       	sec
 c1e:	a1 08       	sbc	r10, r1
 c20:	b1 08       	sbc	r11, r1
 c22:	0f 2e       	mov	r0, r31
 c24:	fe ef       	ldi	r31, 0xFE	; 254
 c26:	8f 2e       	mov	r8, r31
 c28:	ff ef       	ldi	r31, 0xFF	; 255
 c2a:	9f 2e       	mov	r9, r31
 c2c:	f0 2d       	mov	r31, r0
 c2e:	8c 0c       	add	r8, r12
 c30:	9d 1c       	adc	r9, r13
 c32:	0f 2e       	mov	r0, r31
 c34:	fd ef       	ldi	r31, 0xFD	; 253
 c36:	6f 2e       	mov	r6, r31
 c38:	ff ef       	ldi	r31, 0xFF	; 255
 c3a:	7f 2e       	mov	r7, r31
 c3c:	f0 2d       	mov	r31, r0
 c3e:	6c 0c       	add	r6, r12
 c40:	7d 1c       	adc	r7, r13
			LCD_clear_screen();
			LCD_SEND_STRING("enter pass:");
 c42:	0f 2e       	mov	r0, r31
 c44:	f6 e9       	ldi	r31, 0x96	; 150
 c46:	4f 2e       	mov	r4, r31
 c48:	f0 e0       	ldi	r31, 0x00	; 0
 c4a:	5f 2e       	mov	r5, r31
 c4c:	f0 2d       	mov	r31, r0
				_delay_ms(1000);
				LCD_MOVE_CURSOR(2,counter1+7);
				LCD_SEND_CHAR('*');
				_delay_ms(500);
			}			
		if(EEPROM_READ(EEPROM_LOCATION1)==arr[0] && EEPROM_READ(EEPROM_LOCATION2)==arr[1] && EEPROM_READ(EEPROM_LOCATION3)==arr[2] && EEPROM_READ(EEPROM_LOCATION4)==arr[3] )
 c4e:	0f 2e       	mov	r0, r31
 c50:	f1 ef       	ldi	r31, 0xF1	; 241
 c52:	2f 2e       	mov	r2, r31
 c54:	f0 e0       	ldi	r31, 0x00	; 0
 c56:	3f 2e       	mov	r3, r31
 c58:	f0 2d       	mov	r31, r0
		}
// 	else if (EEPROM_READ(EEPROM_STATUS)!=notpassed)
// 		{
		while(flag==0)//Check
		{
			arr[0]=arr[1]=arr[2]=arr[3]=notpassed;
 c5a:	d6 01       	movw	r26, r12
 c5c:	dc 93       	st	X, r29
 c5e:	f5 01       	movw	r30, r10
 c60:	d0 83       	st	Z, r29
 c62:	d4 01       	movw	r26, r8
 c64:	dc 93       	st	X, r29
 c66:	f3 01       	movw	r30, r6
 c68:	d0 83       	st	Z, r29
			LCD_clear_screen();
 c6a:	0e 94 32 05 	call	0xa64	; 0xa64 <LCD_clear_screen>
			LCD_SEND_STRING("enter pass:");
 c6e:	c2 01       	movw	r24, r4
 c70:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_SEND_STRING>
			LCD_MOVE_CURSOR(2,7);
 c74:	82 e0       	ldi	r24, 0x02	; 2
 c76:	67 e0       	ldi	r22, 0x07	; 7
 c78:	0e 94 4b 05 	call	0xa96	; 0xa96 <LCD_MOVE_CURSOR>
 c7c:	00 e0       	ldi	r16, 0x00	; 0
 c7e:	10 e0       	ldi	r17, 0x00	; 0
			for(counter1=0;counter1<=3;counter1++)
			{
		  		do 
				{
				arr[counter1]=keybad_u8read_press();
 c80:	0e 94 33 04 	call	0x866	; 0x866 <keybad_u8read_press>
#define EEPROM_LOCATION3 0X03
#define EEPROM_LOCATION4 0X04
#define max_tries 3
char arr[4];
unsigned char x =0;
int main(void)
 c84:	f8 01       	movw	r30, r16
 c86:	ef 50       	subi	r30, 0x0F	; 15
 c88:	ff 4f       	sbci	r31, 0xFF	; 255
			LCD_MOVE_CURSOR(2,7);
			for(counter1=0;counter1<=3;counter1++)
			{
		  		do 
				{
				arr[counter1]=keybad_u8read_press();
 c8a:	80 83       	st	Z, r24
				}while(arr[counter1]==notpassed);
 c8c:	8f 3f       	cpi	r24, 0xFF	; 255
 c8e:	c1 f3       	breq	.-16     	; 0xc80 <main+0x18a>
#define EEPROM_LOCATION3 0X03
#define EEPROM_LOCATION4 0X04
#define max_tries 3
char arr[4];
unsigned char x =0;
int main(void)
 c90:	c0 2f       	mov	r28, r16
 c92:	c9 5f       	subi	r28, 0xF9	; 249
			{
		  		do 
				{
				arr[counter1]=keybad_u8read_press();
				}while(arr[counter1]==notpassed);
				LCD_MOVE_CURSOR(2,counter1+7);
 c94:	82 e0       	ldi	r24, 0x02	; 2
 c96:	6c 2f       	mov	r22, r28
 c98:	0e 94 4b 05 	call	0xa96	; 0xa96 <LCD_MOVE_CURSOR>
				LCD_SEND_CHAR(arr[counter1]);
 c9c:	f8 01       	movw	r30, r16
 c9e:	ef 50       	subi	r30, 0x0F	; 15
 ca0:	ff 4f       	sbci	r31, 0xFF	; 255
 ca2:	80 81       	ld	r24, Z
 ca4:	0e 94 a1 04 	call	0x942	; 0x942 <LCD_SEND_CHAR>
 ca8:	8f ef       	ldi	r24, 0xFF	; 255
 caa:	90 e7       	ldi	r25, 0x70	; 112
 cac:	a2 e0       	ldi	r26, 0x02	; 2
 cae:	81 50       	subi	r24, 0x01	; 1
 cb0:	90 40       	sbci	r25, 0x00	; 0
 cb2:	a0 40       	sbci	r26, 0x00	; 0
 cb4:	e1 f7       	brne	.-8      	; 0xcae <main+0x1b8>
 cb6:	00 c0       	rjmp	.+0      	; 0xcb8 <main+0x1c2>
 cb8:	00 00       	nop
				_delay_ms(1000);
				LCD_MOVE_CURSOR(2,counter1+7);
 cba:	82 e0       	ldi	r24, 0x02	; 2
 cbc:	6c 2f       	mov	r22, r28
 cbe:	0e 94 4b 05 	call	0xa96	; 0xa96 <LCD_MOVE_CURSOR>
				LCD_SEND_CHAR('*');
 cc2:	8a e2       	ldi	r24, 0x2A	; 42
 cc4:	0e 94 a1 04 	call	0x942	; 0x942 <LCD_SEND_CHAR>
 cc8:	8f e7       	ldi	r24, 0x7F	; 127
 cca:	98 e3       	ldi	r25, 0x38	; 56
 ccc:	a1 e0       	ldi	r26, 0x01	; 1
 cce:	81 50       	subi	r24, 0x01	; 1
 cd0:	90 40       	sbci	r25, 0x00	; 0
 cd2:	a0 40       	sbci	r26, 0x00	; 0
 cd4:	e1 f7       	brne	.-8      	; 0xcce <main+0x1d8>
 cd6:	00 c0       	rjmp	.+0      	; 0xcd8 <main+0x1e2>
 cd8:	00 00       	nop
 cda:	0f 5f       	subi	r16, 0xFF	; 255
 cdc:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			arr[0]=arr[1]=arr[2]=arr[3]=notpassed;
			LCD_clear_screen();
			LCD_SEND_STRING("enter pass:");
			LCD_MOVE_CURSOR(2,7);
			for(counter1=0;counter1<=3;counter1++)
 cde:	04 30       	cpi	r16, 0x04	; 4
 ce0:	11 05       	cpc	r17, r1
 ce2:	71 f6       	brne	.-100    	; 0xc80 <main+0x18a>
				_delay_ms(1000);
				LCD_MOVE_CURSOR(2,counter1+7);
				LCD_SEND_CHAR('*');
				_delay_ms(500);
			}			
		if(EEPROM_READ(EEPROM_LOCATION1)==arr[0] && EEPROM_READ(EEPROM_LOCATION2)==arr[1] && EEPROM_READ(EEPROM_LOCATION3)==arr[2] && EEPROM_READ(EEPROM_LOCATION4)==arr[3] )
 ce4:	81 e0       	ldi	r24, 0x01	; 1
 ce6:	90 e0       	ldi	r25, 0x00	; 0
 ce8:	0e 94 b3 03 	call	0x766	; 0x766 <EEPROM_READ>
 cec:	d1 01       	movw	r26, r2
 cee:	2c 91       	ld	r18, X
 cf0:	30 e0       	ldi	r19, 0x00	; 0
 cf2:	82 17       	cp	r24, r18
 cf4:	93 07       	cpc	r25, r19
 cf6:	09 f0       	breq	.+2      	; 0xcfa <main+0x204>
 cf8:	52 c0       	rjmp	.+164    	; 0xd9e <main+0x2a8>
 cfa:	82 e0       	ldi	r24, 0x02	; 2
 cfc:	90 e0       	ldi	r25, 0x00	; 0
 cfe:	0e 94 b3 03 	call	0x766	; 0x766 <EEPROM_READ>
 d02:	e2 ef       	ldi	r30, 0xF2	; 242
 d04:	f0 e0       	ldi	r31, 0x00	; 0
 d06:	20 81       	ld	r18, Z
 d08:	30 e0       	ldi	r19, 0x00	; 0
 d0a:	82 17       	cp	r24, r18
 d0c:	93 07       	cpc	r25, r19
 d0e:	09 f0       	breq	.+2      	; 0xd12 <main+0x21c>
 d10:	46 c0       	rjmp	.+140    	; 0xd9e <main+0x2a8>
 d12:	83 e0       	ldi	r24, 0x03	; 3
 d14:	90 e0       	ldi	r25, 0x00	; 0
 d16:	0e 94 b3 03 	call	0x766	; 0x766 <EEPROM_READ>
 d1a:	a3 ef       	ldi	r26, 0xF3	; 243
 d1c:	b0 e0       	ldi	r27, 0x00	; 0
 d1e:	2c 91       	ld	r18, X
 d20:	30 e0       	ldi	r19, 0x00	; 0
 d22:	82 17       	cp	r24, r18
 d24:	93 07       	cpc	r25, r19
 d26:	d9 f5       	brne	.+118    	; 0xd9e <main+0x2a8>
 d28:	84 e0       	ldi	r24, 0x04	; 4
 d2a:	90 e0       	ldi	r25, 0x00	; 0
 d2c:	0e 94 b3 03 	call	0x766	; 0x766 <EEPROM_READ>
 d30:	f6 01       	movw	r30, r12
 d32:	20 81       	ld	r18, Z
 d34:	30 e0       	ldi	r19, 0x00	; 0
 d36:	82 17       	cp	r24, r18
 d38:	93 07       	cpc	r25, r19
 d3a:	89 f5       	brne	.+98     	; 0xd9e <main+0x2a8>
		{
			LCD_clear_screen();
 d3c:	0e 94 32 05 	call	0xa64	; 0xa64 <LCD_clear_screen>
			LCD_SEND_STRING("password right");
 d40:	82 ea       	ldi	r24, 0xA2	; 162
 d42:	90 e0       	ldi	r25, 0x00	; 0
 d44:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_SEND_STRING>
		     vLed_toggle('c',1);
 d48:	83 e6       	ldi	r24, 0x63	; 99
 d4a:	90 e0       	ldi	r25, 0x00	; 0
 d4c:	61 e0       	ldi	r22, 0x01	; 1
 d4e:	70 e0       	ldi	r23, 0x00	; 0
 d50:	0e 94 78 05 	call	0xaf0	; 0xaf0 <vLed_toggle>
 d54:	8f e7       	ldi	r24, 0x7F	; 127
 d56:	98 e3       	ldi	r25, 0x38	; 56
 d58:	a1 e0       	ldi	r26, 0x01	; 1
 d5a:	81 50       	subi	r24, 0x01	; 1
 d5c:	90 40       	sbci	r25, 0x00	; 0
 d5e:	a0 40       	sbci	r26, 0x00	; 0
 d60:	e1 f7       	brne	.-8      	; 0xd5a <main+0x264>
 d62:	00 c0       	rjmp	.+0      	; 0xd64 <main+0x26e>
 d64:	00 00       	nop
			_delay_ms(500);
			LCD_MOVE_CURSOR(2,3);
 d66:	82 e0       	ldi	r24, 0x02	; 2
 d68:	63 e0       	ldi	r22, 0x03	; 3
 d6a:	0e 94 4b 05 	call	0xa96	; 0xa96 <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("safa open");
 d6e:	81 eb       	ldi	r24, 0xB1	; 177
 d70:	90 e0       	ldi	r25, 0x00	; 0
 d72:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_SEND_STRING>
	  }  
	    
		
	//}		
	//}	
}  			
 d76:	80 e0       	ldi	r24, 0x00	; 0
 d78:	90 e0       	ldi	r25, 0x00	; 0
 d7a:	df 91       	pop	r29
 d7c:	cf 91       	pop	r28
 d7e:	1f 91       	pop	r17
 d80:	0f 91       	pop	r16
 d82:	ff 90       	pop	r15
 d84:	df 90       	pop	r13
 d86:	cf 90       	pop	r12
 d88:	bf 90       	pop	r11
 d8a:	af 90       	pop	r10
 d8c:	9f 90       	pop	r9
 d8e:	8f 90       	pop	r8
 d90:	7f 90       	pop	r7
 d92:	6f 90       	pop	r6
 d94:	5f 90       	pop	r5
 d96:	4f 90       	pop	r4
 d98:	3f 90       	pop	r3
 d9a:	2f 90       	pop	r2
 d9c:	08 95       	ret
			LCD_SEND_STRING("safa open");
			flag=1;
		}
		else
		{
			max=max-1;
 d9e:	cf 2d       	mov	r28, r15
 da0:	c1 50       	subi	r28, 0x01	; 1
			if(max>0)
 da2:	31 f1       	breq	.+76     	; 0xdf0 <main+0x2fa>
			{
				LCD_clear_screen();
 da4:	0e 94 32 05 	call	0xa64	; 0xa64 <LCD_clear_screen>
				LCD_SEND_STRING("wrong password");
 da8:	8b eb       	ldi	r24, 0xBB	; 187
 daa:	90 e0       	ldi	r25, 0x00	; 0
 dac:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_SEND_STRING>
 db0:	8f ef       	ldi	r24, 0xFF	; 255
 db2:	92 e5       	ldi	r25, 0x52	; 82
 db4:	a7 e0       	ldi	r26, 0x07	; 7
 db6:	81 50       	subi	r24, 0x01	; 1
 db8:	90 40       	sbci	r25, 0x00	; 0
 dba:	a0 40       	sbci	r26, 0x00	; 0
 dbc:	e1 f7       	brne	.-8      	; 0xdb6 <main+0x2c0>
 dbe:	00 c0       	rjmp	.+0      	; 0xdc0 <main+0x2ca>
 dc0:	00 00       	nop
				_delay_ms(3000);
				LCD_MOVE_CURSOR(2,2);
 dc2:	82 e0       	ldi	r24, 0x02	; 2
 dc4:	62 e0       	ldi	r22, 0x02	; 2
 dc6:	0e 94 4b 05 	call	0xa96	; 0xa96 <LCD_MOVE_CURSOR>
				LCD_SEND_STRING("tries left");
 dca:	8a ec       	ldi	r24, 0xCA	; 202
 dcc:	90 e0       	ldi	r25, 0x00	; 0
 dce:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_SEND_STRING>
				LCD_SEND_CHAR(max+48);
 dd2:	8f 2d       	mov	r24, r15
 dd4:	81 5d       	subi	r24, 0xD1	; 209
 dd6:	0e 94 a1 04 	call	0x942	; 0x942 <LCD_SEND_CHAR>
 dda:	8f ef       	ldi	r24, 0xFF	; 255
 ddc:	92 e5       	ldi	r25, 0x52	; 82
 dde:	a7 e0       	ldi	r26, 0x07	; 7
 de0:	81 50       	subi	r24, 0x01	; 1
 de2:	90 40       	sbci	r25, 0x00	; 0
 de4:	a0 40       	sbci	r26, 0x00	; 0
 de6:	e1 f7       	brne	.-8      	; 0xde0 <main+0x2ea>
 de8:	00 c0       	rjmp	.+0      	; 0xdea <main+0x2f4>
 dea:	00 00       	nop
			LCD_SEND_STRING("safa open");
			flag=1;
		}
		else
		{
			max=max-1;
 dec:	fc 2e       	mov	r15, r28
 dee:	35 cf       	rjmp	.-406    	; 0xc5a <main+0x164>
				LCD_SEND_CHAR(max+48);
				_delay_ms(3000);
			}
			else
			{
				LCD_clear_screen();
 df0:	0e 94 32 05 	call	0xa64	; 0xa64 <LCD_clear_screen>
				LCD_SEND_STRING("worng password");
 df4:	85 ed       	ldi	r24, 0xD5	; 213
 df6:	90 e0       	ldi	r25, 0x00	; 0
 df8:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_SEND_STRING>
				LCD_MOVE_CURSOR(2,3);
 dfc:	82 e0       	ldi	r24, 0x02	; 2
 dfe:	63 e0       	ldi	r22, 0x03	; 3
 e00:	0e 94 4b 05 	call	0xa96	; 0xa96 <LCD_MOVE_CURSOR>
				vDIO_WRITE_BIT('c',4,1);
 e04:	83 e6       	ldi	r24, 0x63	; 99
 e06:	64 e0       	ldi	r22, 0x04	; 4
 e08:	41 e0       	ldi	r20, 0x01	; 1
 e0a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <vDIO_WRITE_BIT>
				LCD_SEND_STRING("wait 30sec");
 e0e:	84 ee       	ldi	r24, 0xE4	; 228
 e10:	90 e0       	ldi	r25, 0x00	; 0
 e12:	0e 94 3c 05 	call	0xa78	; 0xa78 <LCD_SEND_STRING>
 e16:	8f ef       	ldi	r24, 0xFF	; 255
 e18:	9d e3       	ldi	r25, 0x3D	; 61
 e1a:	a9 e4       	ldi	r26, 0x49	; 73
 e1c:	81 50       	subi	r24, 0x01	; 1
 e1e:	90 40       	sbci	r25, 0x00	; 0
 e20:	a0 40       	sbci	r26, 0x00	; 0
 e22:	e1 f7       	brne	.-8      	; 0xe1c <main+0x326>
 e24:	00 c0       	rjmp	.+0      	; 0xe26 <main+0x330>
 e26:	00 00       	nop
				_delay_ms(30000);
				max=3;
 e28:	0f 2e       	mov	r0, r31
 e2a:	f3 e0       	ldi	r31, 0x03	; 3
 e2c:	ff 2e       	mov	r15, r31
 e2e:	f0 2d       	mov	r31, r0
 e30:	14 cf       	rjmp	.-472    	; 0xc5a <main+0x164>

00000e32 <_exit>:
 e32:	f8 94       	cli

00000e34 <__stop_program>:
 e34:	ff cf       	rjmp	.-2      	; 0xe34 <__stop_program>
